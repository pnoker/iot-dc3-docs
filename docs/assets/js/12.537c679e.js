(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{704:function(t,e,s){"use strict";s.r(e);var n=s(62),a=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"rabbitmq-集群部署"}},[e("code",[t._v("RabbitMQ")]),t._v(" 集群部署 "),e("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq-集群部署"}},[t._v("#")])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("RabbiMQ")]),t._v(" 是用 "),e("code",[t._v("Erlang")]),t._v(" 开发的，集群非常方便，因为 "),e("code",[t._v("Erlang")]),t._v(" 天生就是一门分布式语言，但其本身并不支持负载均衡。")]),t._v(" "),e("p",[e("code",[t._v("RabbitMQ")]),t._v(" 的集群节点包括内存节点、磁盘节点。"),e("code",[t._v("RabbitMQ")]),t._v(" 支持消息的持久化，也就是数据写在磁盘上，最合适的方案就是既有内存节点，又有磁盘节点。")]),t._v(" "),e("p",[e("code",[t._v("RabbitMQ")]),t._v(" 模式大概分为以下三种:")]),t._v(" "),e("ul",[e("li",[t._v("单一模式；")]),t._v(" "),e("li",[t._v("普通模式（默认的集群模式）；")]),t._v(" "),e("li",[t._v("镜像模式（把需要的队列做成镜像队列，存在于多个节点，属于 "),e("code",[t._v("RabbiMQ")]),t._v(" 的 "),e("code",[t._v("HA")]),t._v(" 方案，在对业务可靠性要求较高的场合中比较适用）。\n要实现镜像模式，需要先搭建一个普通集群模式，在这个模式的基础上再配置镜像模式以实现高可用。")])])]),t._v(" "),e("h3",{attrs:{id:"_1-集群架构"}},[t._v("1. 集群架构 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_1-集群架构"}},[t._v("#")])]),t._v(" "),e("p",[e("img",{attrs:{src:"/assets/images/dc3/cluster/rabbitmq/rabbitmq-1.png",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_2-集群部署规划"}},[t._v("2. 集群部署规划 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_2-集群部署规划"}},[t._v("#")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[e("code",[t._v("item")])]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[e("code",[t._v("node 1")])]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[e("code",[t._v("node 2")])]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[e("code",[t._v("node 3")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("listeners.tcp.default")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5000")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5100")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5200")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("management.tcp.port")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5020")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5120")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5220")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("mqtt.listeners.tcp.default")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5040")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5140")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5240")])])])]),t._v(" "),e("h3",{attrs:{id:"_3-安装文件"}},[t._v("3. 安装文件 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_3-安装文件"}},[t._v("#")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("下载文件")])]),t._v(" "),e("p",[t._v("请下载 "),e("code",[t._v("unix generic")]),t._v(" 版本")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("以 "),e("code",[t._v("3.9.11")]),t._v(" 版本为例： https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.9.11/rabbitmq-server-generic-unix-3.9.11.tar.xz")])]),t._v(" "),e("li",[e("p",[t._v("其他版本下载：https://github.com/rabbitmq/rabbitmq-server/releases")])])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("解压文件")])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("xz "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" rabbitmq-server-generic-unix-3.9.11.tar.xz\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" xvf rabbitmq-server-generic-unix-3.9.11.tar\n")])])]),e("h3",{attrs:{id:"_4-集群部署"}},[t._v("4. 集群部署 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-集群部署"}},[t._v("#")])]),t._v(" "),e("h4",{attrs:{id:"_4-1-创建文件目录"}},[t._v("4.1 创建文件目录 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-创建文件目录"}},[t._v("#")])]),t._v(" "),e("blockquote",[e("p",[t._v("分别创建三个节点（"),e("code",[t._v("node")]),t._v("）目录，多个以此类推 "),e("code",[t._v("node-N")])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /data\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" rabbitmq/dc3/node-01 rabbitmq/dc3/node-02 rabbitmq/dc3/node-03\n")])])]),e("blockquote",[e("p",[t._v("将解压的 "),e("code",[t._v("rabbitmq")]),t._v(" 文件放入到每个节点中，其他节点操作一致")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" rabbitmq-server/* rabbitmq/dc3/node-01/\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pwd")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /data/rabbitmq/dc3/node-01")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ls")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# escript  etc  plugins  sbin  share")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("为每个节点创建配置和 "),e("code",[t._v("keys")]),t._v(" 目录，其他节点操作一致")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" node-N\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" etc/rabbitmq keys\n")])])]),e("h4",{attrs:{id:"_4-2-配置文件"}},[t._v("4.2 配置文件 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-配置文件"}},[t._v("#")])]),t._v(" "),e("blockquote",[e("p",[t._v("在每个节点的 "),e("code",[t._v("etc/rabbitmq")]),t._v(" 下添加配置文件 "),e("code",[t._v("advanced.config")]),t._v("、"),e("code",[t._v("rabbitmq.conf")]),t._v("、"),e("code",[t._v("rabbitmq-env.conf")]),t._v("、"),e("code",[t._v("enabled_plugins")])])]),t._v(" "),e("h5",{attrs:{id:"_4-2-1-advanced-config"}},[t._v("4.2.1 "),e("code",[t._v("advanced.config")]),t._v(" "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-advanced-config"}},[t._v("#")])]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n\n\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% ----------------------------------------------------------------------------")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% Advanced Erlang Networking/Clustering Options.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% See https://www.rabbitmq.com/clustering.html for details")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% ----------------------------------------------------------------------------")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% Sets the net_kernel tick time.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% Please see http://erlang.org/doc/man/kernel_app.html and")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% https://www.rabbitmq.com/nettick.html for further details.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% {kernel, [{net_ticktime, 60}]},")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% ----------------------------------------------------------------------------")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% RabbitMQ Shovel Plugin")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% See https://www.rabbitmq.com/shovel.html for details")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% ----------------------------------------------------------------------------")]),t._v("\n\n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("rabbitmq_shovel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("shovels"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("%% A named shovel worker.\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% {my_first_shovel,")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%  [")]),t._v("\n\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% List the source broker(s) from which to consume.")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%   {sources,")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%    [%% URI(s) and pre-declarations for all source broker(s).")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v('%%     {brokers, ["amqp://user:password@host.domain/my_vhost"]},')]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%     {declarations, []}")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%    ]},")]),t._v("\n\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% List the destination broker(s) to publish to.")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%   {destinations,")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%    [%% A singular version of the 'brokers' element.")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v('%%     {broker, "amqp://"},')]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%     {declarations, []}")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%    ]},")]),t._v("\n\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% Name of the queue to shovel messages from.")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v('%% {queue, <<"your-queue-name-goes-here">>},')]),t._v("\n\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% Optional prefetch count.")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% {prefetch_count, 10},")]),t._v("\n\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% when to acknowledge messages:")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% - ")]),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("no_ack")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" never (auto)\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% - ")]),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on_publish")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" after each message is republished\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% - ")]),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on_confirm")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" when the destination broker confirms receipt\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% {ack_mode, on_confirm},")]),t._v("\n\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% Overwrite fields of the outbound basic.publish.")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v('%% {publish_fields, [{exchange,    <<"my_exchange">>},')]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v('%%                   {routing_key, <<"from_shovel">>}]},')]),t._v("\n\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% Static list of basic.properties to set on re-publication.")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% {publish_properties, [{delivery_mode, 2}]},")]),t._v("\n\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% The number of seconds to wait before attempting to")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% reconnect in the event of a connection failure.")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% {reconnect_delay, 2.5}")]),t._v("\n\n     "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% ]} %% End of my_first_shovel")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% Rather than specifying some values per-shovel, you can specify")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% them for all shovels here.")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% {defaults, [{prefetch_count,     0},")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%             {ack_mode,           on_confirm},")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%             {publish_fields,     []},")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%             {publish_properties, [{delivery_mode, 2}]},")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%             {reconnect_delay,    2.5}]}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("rabbitmq_auth_backend_ldap"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% Authorisation")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% =============")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% The LDAP plugin can perform a variety of queries against your")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% LDAP server to determine questions of authorisation. See")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% https://www.rabbitmq.com/ldap.html")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#authorisation for more")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% information.")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% Set the query to use when determining vhost access")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% {vhost_access_query, {in_group,")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v('%%                       "ou=${vhost}-users,ou=vhosts,dc=example,dc=com"}},')]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% Set the query to use when determining resource (e.g., queue) access")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% {resource_access_query, {constant, true}},")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% Set queries to determine which tags a user has")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%%")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%% {tag_queries, []}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".\n")])])]),e("h5",{attrs:{id:"_4-2-2-rabbitmq-conf"}},[t._v("4.2.2 "),e("code",[t._v("rabbitmq.conf")]),t._v(" "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-rabbitmq-conf"}},[t._v("#")])]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This example configuration file demonstrates various settings")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## available via rabbitmq.conf. It primarily focuses core broker settings")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## but some tier 1 plugin settings are also covered.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This file is AN EXAMPLE. It is NOT MEANT TO BE USED IN PRODUCTION. Instead of")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## copying the entire (large!) file, create or generate a new rabbitmq.conf for the target system")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## and populate it with the necessary settings.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See https://rabbitmq.com/configure.html to learn about how to configure RabbitMQ,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the ini-style format used by rabbitmq.conf, how it is different from `advanced.config`,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## how to verify effective configuration, and so on.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See https://rabbitmq.com/documentation.html for the rest of RabbitMQ documentation.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## In case you have questions, please use RabbitMQ community Slack and the rabbitmq-users Google group")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## instead of GitHub issues.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ======================================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Core broker section")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ======================================")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Networking")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ====================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/networking.html.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## By default, RabbitMQ will listen on all interfaces, using")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the standard (reserved) AMQP 0-9-1 and 1.0 port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\nlisteners.tcp.default = 5000\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To listen on a specific interface, provide an IP address with port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## For example, to listen only on localhost for both IPv4 and IPv6:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# IPv4")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# listeners.tcp.local    = 127.0.0.1:5672")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# IPv6")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# listeners.tcp.local_v6 = ::1:5672")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## You can define multiple listeners using listener names")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# listeners.tcp.other_port = 5673")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# listeners.tcp.other_ip   = 10.10.10.10:5672")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS listeners are configured in the same fashion as TCP listeners,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## including the option to control the choice of interface.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# listeners.ssl.default = 5030")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## It is possible to disable regular TCP (non-TLS) listeners. Clients")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## not configured to use TLS and the correct TLS-enabled port won't be able")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## to connect to this node.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# listeners.tcp = none")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Number of Erlang processes that will accept connections for the TCP")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## and TLS listeners.k")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# num_acceptors.tcp = 10")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# num_acceptors.ssl = 10")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Socket writer will force GC every so many bytes transferred.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default is 1 GiB (`1000000000`). Set to 'off' to disable.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# socket_writer.gc_threshold = 1000000000")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To disable:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# socket_writer.gc_threshold = off")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum amount of time allowed for the AMQP 0-9-1 and AMQP 1.0 handshake")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## (performed after socket connection and TLS handshake) to complete, in milliseconds.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# handshake_timeout = 10000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set to 'true' to perform reverse DNS lookups when accepting a")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## connection. rabbitmqctl and management UI will then display hostnames")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## instead of IP addresses. Default value is `false`.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# reverse_dns_lookups = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Security, Access Control")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ==============")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/access-control.html.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## The default "guest" user is only permitted to access the server')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## via a loopback interface (e.g. localhost).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## {loopback_users, [<<"guest">>]},')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# loopback_users.guest = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Uncomment the following line if you want to allow access to the")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## guest user from anywhere on the network.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# loopback_users.guest = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS configuration.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/ssl.html.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# listeners.ssl.1                  = 5671")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.verify               = verify_peer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.fail_if_no_peer_cert = false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.cacertfile           = /path/to/cacert.pem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.certfile             = /path/to/cert.pem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.keyfile              = /path/to/key.pem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.honor_cipher_order   = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.honor_ecc_order      = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## These are highly recommended for TLSv1.2 but cannot be used")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## with TLSv1.3. If TLSv1.3 is enabled, these lines MUST be removed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.client_renegotiation = false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.secure_renegotiate   = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Limits what TLS versions the server enables for client TLS")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## connections. See https://www.rabbitmq.com/ssl.html#tls-versions for details.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Cutting edge TLS version which requires recent client runtime")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## versions and has no cipher suite in common with earlier TLS versions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.versions.1 = tlsv1.3")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enables TLSv1.2 for best compatibility")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.versions.2 = tlsv1.2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Older TLS versions have known vulnerabilities and are being phased out")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## from wide use.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Limits what cipher suites the server will use for client TLS")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## connections. Narrowing this down can prevent some clients")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## from connecting.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If TLSv1.3 is enabled and cipher suites are overridden, TLSv1.3-specific")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cipher suites must also be explicitly enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See https://www.rabbitmq.com/ssl.html#cipher-suites and https://wiki.openssl.org/index.php/TLS1.3#Ciphersuites")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## for details.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The example below uses TLSv1.3 cipher suites only")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.1  = TLS_AES_256_GCM_SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.2  = TLS_AES_128_GCM_SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.3  = TLS_CHACHA20_POLY1305_SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.4  = TLS_AES_128_CCM_SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.5  = TLS_AES_128_CCM_8_SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The example below uses TLSv1.2 cipher suites only")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.3  = ECDHE-ECDSA-AES256-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.4  = ECDHE-RSA-AES256-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.5  = ECDH-ECDSA-AES256-GCM-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.6  = ECDH-RSA-AES256-GCM-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.7  = ECDH-ECDSA-AES256-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.8  = ECDH-RSA-AES256-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.9  = DHE-RSA-AES256-GCM-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.10 = DHE-DSS-AES256-GCM-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.11 = DHE-RSA-AES256-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.12 = DHE-DSS-AES256-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.13 = ECDHE-ECDSA-AES128-GCM-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.14 = ECDHE-RSA-AES128-GCM-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.15 = ECDHE-ECDSA-AES128-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.16 = ECDHE-RSA-AES128-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.17 = ECDH-ECDSA-AES128-GCM-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.18 = ECDH-RSA-AES128-GCM-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.19 = ECDH-ECDSA-AES128-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.20 = ECDH-RSA-AES128-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.21 = DHE-RSA-AES128-GCM-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.22 = DHE-DSS-AES128-GCM-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.23 = DHE-RSA-AES128-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.24 = DHE-DSS-AES128-SHA256")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.25 = ECDHE-ECDSA-AES256-SHA")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.26 = ECDHE-RSA-AES256-SHA")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.27 = DHE-RSA-AES256-SHA")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.28 = DHE-DSS-AES256-SHA")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.29 = ECDH-ECDSA-AES256-SHA")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.30 = ECDH-RSA-AES256-SHA")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.31 = ECDHE-ECDSA-AES128-SHA")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.32 = ECDHE-RSA-AES128-SHA")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.33 = DHE-RSA-AES128-SHA")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.34 = DHE-DSS-AES128-SHA")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.35 = ECDH-ECDSA-AES128-SHA")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.ciphers.36 = ECDH-RSA-AES128-SHA")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.bypass_pem_cache = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Select an authentication/authorisation backend to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Alternative backends are provided by plugins, such as rabbitmq-auth-backend-ldap.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NB: These settings require certain plugins to be enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guides:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  * https://rabbitmq.com/plugins.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  * https://rabbitmq.com/access-control.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_backends.1   = rabbit_auth_backend_internal")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## uses separate backends for authentication and authorisation,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## see below.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_backends.1.authn = rabbit_auth_backend_ldap")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_backends.1.authz = rabbit_auth_backend_internal")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The rabbitmq_auth_backend_ldap plugin allows the broker to")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## perform authentication and authorisation by deferring to an")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## external LDAP server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Relevant doc guides:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## * https://rabbitmq.com/ldap.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## * https://rabbitmq.com/access-control.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## uses LDAP for both authentication and authorisation")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_backends.1 = rabbit_auth_backend_ldap")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## uses HTTP service for both authentication and")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## authorisation")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_backends.1 = rabbit_auth_backend_http")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## uses two backends in a chain: HTTP first, then internal")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_backends.1   = rabbit_auth_backend_http")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_backends.2   = rabbit_auth_backend_internal")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Authentication")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The built-in mechanisms are 'PLAIN',")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 'AMQPLAIN', and 'EXTERNAL' Additional mechanisms can be added via")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## plugins.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/authentication.html.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_mechanisms.1 = PLAIN")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_mechanisms.2 = AMQPLAIN")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The rabbitmq-auth-mechanism-ssl plugin makes it possible to")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## authenticate a user based on the client's x509 (TLS) certificate.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/authentication.html.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To use auth-mechanism-ssl, the EXTERNAL mechanism should")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## be enabled:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_mechanisms.1 = PLAIN")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_mechanisms.2 = AMQPLAIN")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_mechanisms.3 = EXTERNAL")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To force x509 certificate-based authentication on all clients,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## exclude all other mechanisms (note: this will disable password-based")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## authentication even for the management UI!):")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_mechanisms.1 = EXTERNAL")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This pertains to both the rabbitmq-auth-mechanism-ssl plugin and")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## STOMP ssl_cert_login configurations. See the RabbitMQ STOMP plugin")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## configuration section later in this file and the README in")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## https://github.com/rabbitmq/rabbitmq-auth-mechanism-ssl for further")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## details.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To use the TLS cert's CN instead of its DN as the username")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_cert_login_from   = common_name")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS handshake timeout, in milliseconds.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_handshake_timeout = 5000")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Cluster name")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_name = dev3.eng.megacorp.local")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Password hashing implementation. Will only affect newly")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## created users. To recalculate hash for an existing user")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## it's necessary to update her password.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To use SHA-512, set to rabbit_password_hashing_sha512.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# password_hashing_module = rabbit_password_hashing_sha256")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## When importing definitions exported from versions earlier")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## than 3.6.0, it is possible to go back to MD5 (only do this")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## as a temporary measure!) by setting this to rabbit_password_hashing_md5.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# password_hashing_module = rabbit_password_hashing_md5")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default User / VHost")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ====================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## On first start RabbitMQ will create a vhost and a user. These")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## config items control what gets created.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Relevant doc guide: https://rabbitmq.com/access-control.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\ndefault_vhost = /dc3\ndefault_user = dc3\ndefault_pass = dc3\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# default_permissions.configure = .*")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# default_permissions.read = .*")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# default_permissions.write = .*")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Tags for default user")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## For more details about tags, see the documentation for the")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Management Plugin at https://rabbitmq.com/management.html.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# default_user_tags.administrator = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Define other tags like this:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# default_user_tags.management = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# default_user_tags.custom_tag = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Additional network and protocol related configuration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## =====================================================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set the server AMQP 0-9-1 heartbeat timeout in seconds.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## RabbitMQ nodes will send heartbeat frames at roughly")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the (timeout / 2) interval. Two missed heartbeats from")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## a client will close its connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Values lower than 6 seconds are very likely to produce")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## false positives and are not recommended.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guides:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## * https://rabbitmq.com/heartbeats.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## * https://rabbitmq.com/networking.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# heartbeat = 60")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set the max permissible size of an AMQP frame (in bytes).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# frame_max = 131072")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set the max frame size the server will accept before connection")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## tuning occurs")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# initial_frame_max = 4096")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set the max permissible number of channels per connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## 0 means "no limit".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# channel_max = 128")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Customising TCP Listener (Socket) Configuration.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guides:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## * https://rabbitmq.com/networking.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## * https://www.erlang.org/doc/man/inet.html#setopts-2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tcp_listen_options.backlog = 128")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tcp_listen_options.nodelay = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tcp_listen_options.exit_on_close = false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tcp_listen_options.keepalive = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tcp_listen_options.send_timeout = 15000")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tcp_listen_options.buffer = 196608")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tcp_listen_options.sndbuf = 196608")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tcp_listen_options.recbuf = 196608")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Resource Limits & Flow Control")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ==============================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/memory.html.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Memory-based Flow Control threshold.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# vm_memory_high_watermark.relative = 0.4")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Alternatively, we can set a limit (in bytes) of RAM used by the node.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# vm_memory_high_watermark.absolute = 1073741824")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Or you can set absolute value using memory units (with RabbitMQ 3.6.0+).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Absolute watermark will be ignored if relative is defined!")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# vm_memory_high_watermark.absolute = 2GB")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Supported unit symbols:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## k, kiB: kibibytes (2^10 - 1,024 bytes)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## M, MiB: mebibytes (2^20 - 1,048,576 bytes)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## G, GiB: gibibytes (2^30 - 1,073,741,824 bytes)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## kB: kilobytes (10^3 - 1,000 bytes)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## MB: megabytes (10^6 - 1,000,000 bytes)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## GB: gigabytes (10^9 - 1,000,000,000 bytes)")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Fraction of the high watermark limit at which queues start to")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## page message out to disc in order to free up memory.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## For example, when vm_memory_high_watermark is set to 0.4 and this value is set to 0.5,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## paging can begin as early as when 20% of total available RAM is used by the node.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Values greater than 1.0 can be dangerous and should be used carefully.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## One alternative to this is to use durable queues and publish messages")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## as persistent (delivery mode = 2). With this combination queues will")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## move messages to disk much more rapidly.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Another alternative is to configure queues to page all messages (both")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## persistent and transient) to disk as quickly")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## as possible, see https://rabbitmq.com/lazy-queues.html.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# vm_memory_high_watermark_paging_ratio = 0.5")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Selects Erlang VM memory consumption calculation strategy. Can be `allocated`, `rss` or `legacy` (aliased as `erlang`),")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Introduced in 3.6.11. `rss` is the default as of 3.6.12.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See https://github.com/rabbitmq/rabbitmq-server/issues/1223 and rabbitmq/rabbitmq-common#224 for background.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# vm_memory_calculation_strategy = rss")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Interval (in milliseconds) at which we perform the check of the memory")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## levels against the watermarks.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# memory_monitor_interval = 2500")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The total memory available can be calculated from the OS resources")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - default option - or provided as a configuration parameter.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# total_memory_available_override_value = 2GB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set disk free limit (in bytes). Once free disk space reaches this")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## lower bound, a disk alarm will be set - see the documentation")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listed above for more details.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Absolute watermark will be ignored if relative is defined!")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# disk_free_limit.absolute = 50000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Or you can set it using memory units (same as in vm_memory_high_watermark)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## with RabbitMQ 3.6.0+.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# disk_free_limit.absolute = 500KB")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# disk_free_limit.absolute = 50mb")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# disk_free_limit.absolute = 5GB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Alternatively, we can set a limit relative to total available RAM.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Values lower than 1.0 can be dangerous and should be used carefully.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# disk_free_limit.relative = 2.0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Clustering")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## =====================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_partition_handling = ignore")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Pauses all nodes on the minority side of a partition. The cluster")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## MUST have an odd number of nodes (3, 5, etc)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_partition_handling = pause_minority")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## pause_if_all_down strategy require additional configuration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_partition_handling = pause_if_all_down")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Recover strategy. Can be either 'autoheal' or 'ignore'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_partition_handling.pause_if_all_down.recover = ignore")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Node names to check")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_partition_handling.pause_if_all_down.nodes.1 = rabbit@localhost")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_partition_handling.pause_if_all_down.nodes.2 = hare@localhost")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Mirror sync batch size, in messages. Increasing this will speed")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## up syncing but total batch size in bytes must not exceed 2 GiB.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Available in RabbitMQ 3.6.0 or later.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mirroring_sync_batch_size = 4096")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Make clustering happen *automatically* at startup. Only applied")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## to nodes that have just been reset or started for the first time.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Relevant doc guide: https://rabbitmq.com//cluster-formation.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_formation.peer_discovery_backend     = rabbit_peer_discovery_classic_config")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_formation.classic_config.nodes.1 = rabbit1@hostname")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_formation.classic_config.nodes.2 = rabbit2@hostname")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_formation.classic_config.nodes.3 = rabbit3@hostname")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_formation.classic_config.nodes.4 = rabbit4@hostname")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## DNS-based peer discovery. This backend will list A records")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## of the configured hostname and perform reverse lookups for")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the addresses returned.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_dns")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_formation.dns.hostname = discovery.eng.example.local")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This node's type can be configured. If you are not sure")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## what node type to use, always use 'disc'.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_formation.node_type = disc")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Interval (in milliseconds) at which we send keepalive messages")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## to other cluster members. Note that this is not the same thing")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## as net_ticktime; missed keepalive messages will not cause nodes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## to be considered down.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cluster_keepalive_interval = 10000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Statistics Collection")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## =====================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Statistics collection interval (in milliseconds). Increasing")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## this will reduce the load on management database.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# collect_statistics_interval = 5000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Fine vs. coarse statistics")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This value is no longer meant to be configured directly.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# See https://www.rabbitmq.com/management.html#fine-stats.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Ra Settings")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## =====================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# raft.segment_max_entries = 65536")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# raft.wal_max_size_bytes = 1048576")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# raft.wal_max_batch_size = 4096")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# raft.snapshot_chunk_size = 1000000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Misc/Advanced Options")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## =====================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NB: Change these only if you understand what you are doing!")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Timeout used when waiting for Mnesia tables in a cluster to")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## become available.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mnesia_table_loading_retry_timeout = 30000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Retries when waiting for Mnesia tables in the cluster startup. Note that")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## this setting is not applied to Mnesia upgrades or node deletions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mnesia_table_loading_retry_limit = 10")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Size in bytes below which to embed messages in the queue index.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/persistence-conf.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# queue_index_embed_msgs_below = 4096")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## You can also set this size in memory units")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# queue_index_embed_msgs_below = 4kb")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether or not to enable background periodic forced GC runs for all")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Erlang processes on the node in "waiting" state.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Disabling background GC may reduce latency for client operations,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## keeping it enabled may reduce median RAM usage by the binary heap")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## (see https://www.erlang-solutions.com/blog/erlang-garbage-collector.html).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Before trying this option, please take a look at the memory")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## breakdown (https://www.rabbitmq.com/memory-use.html).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# background_gc_enabled = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Target (desired) interval (in milliseconds) at which we run background GC.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The actual interval will vary depending on how long it takes to execute")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the operation (can be higher than this interval). Values less than")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 30000 milliseconds are not recommended.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# background_gc_target_interval = 60000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether or not to enable proxy protocol support.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Once enabled, clients cannot directly connect to the broker")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## anymore. They must connect through a load balancer that sends the")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## proxy protocol header to the broker at connection time.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This setting applies only to AMQP clients, other protocols")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## like MQTT or STOMP have their own setting to enable proxy protocol.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See the plugins documentation for more information.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# proxy_protocol = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Overriden product name and version.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## They are set to "RabbitMQ" and the release version by default.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# product.name = RabbitMQ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# product.version = 1.2.3")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## "Message of the day" file.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Its content is used to expand the logged and printed banners.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default to /etc/rabbitmq/motd on Unix, %APPDATA%\\RabbitMQ\\motd.txt")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## on Windows.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# motd_file = /etc/rabbitmq/motd")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Consumer timeout")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If a message delivered to a consumer has not been acknowledge before this timer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## triggers the channel will be force closed by the broker. This ensure that")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## faultly consumers that never ack will not hold on to messages indefinitely.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# consumer_timeout = 900000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Advanced Erlang Networking/Clustering Options.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/clustering.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ======================================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Kernel section")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ======================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Timeout used to detect peer unavailability, including CLI tools.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://www.rabbitmq.com/nettick.html.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# net_ticktime = 60")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Inter-node communication port range.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The parameters inet_dist_listen_min and inet_dist_listen_max")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## can be configured in the classic config format only.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://www.rabbitmq.com/networking.html#epmd-inet-dist-port-range.")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## RabbitMQ Management Plugin")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/management.html.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =======================================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Management section")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =======================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Preload schema definitions from the following JSON file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/management.html#load-definitions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.load_definitions = /path/to/exported/definitions.json")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log all requests to the management HTTP API to a file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.http_log_dir = /path/to/access.log")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## HTTP listener and embedded Web server settings.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ## See https://rabbitmq.com/management.html for details.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\nmanagement.tcp.port = 5020\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.tcp.ip   = 0.0.0.0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.tcp.shutdown_timeout   = 7000")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.tcp.max_keepalive      = 120")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.tcp.idle_timeout       = 120")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.tcp.inactivity_timeout = 120")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.tcp.request_timeout    = 120")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.tcp.compress           = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## HTTPS listener settings.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See https://rabbitmq.com/management.html and https://rabbitmq.com/ssl.html for details.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.port       = 15671")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.cacertfile = /path/to/ca_certificate.pem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.certfile   = /path/to/server_certificate.pem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.keyfile    = /path/to/server_key.pem")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## More TLS options")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.honor_cipher_order   = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.honor_ecc_order      = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## These are highly recommended for TLSv1.2 but cannot be used")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## with TLSv1.3. If TLSv1.3 is enabled, these lines MUST be removed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.client_renegotiation = false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.secure_renegotiate   = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Supported TLS versions")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.versions.1 = tlsv1.2")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Cipher suites the server is allowed to use")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## URL path prefix for HTTP API and management UI")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.path_prefix = /a-prefix")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## One of 'basic', 'detailed' or 'none'. See")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## https://rabbitmq.com/management.html#fine-stats for more details.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.rates_mode = basic")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Configure how long aggregated data (such as message rates and queue")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## lengths) is retained. Please read the plugin's documentation in")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## https://rabbitmq.com/management.html#configuration for more")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## details.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Your can use 'minute', 'hour' and 'day' keys or integer key (in seconds)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.sample_retention_policies.global.minute    = 5")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.sample_retention_policies.global.hour  = 60")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.sample_retention_policies.global.day = 1200")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.sample_retention_policies.basic.minute   = 5")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.sample_retention_policies.basic.hour = 60")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# management.sample_retention_policies.detailed.10 = 5")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## RabbitMQ Shovel Plugin")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/shovel.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See advanced.config.example for a Shovel plugin example")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## RabbitMQ STOMP Plugin")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/stomp.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =======================================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# STOMP section")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =======================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See https://rabbitmq.com/stomp.html for details.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TCP listeners.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.listeners.tcp.1 = 127.0.0.1:61613")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.listeners.tcp.2 = ::1:61613")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TCP listener settings")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.tcp_listen_options.backlog   = 2048")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.tcp_listen_options.recbuf    = 131072")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.tcp_listen_options.sndbuf    = 131072")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.tcp_listen_options.keepalive = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.tcp_listen_options.nodelay   = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.tcp_listen_options.exit_on_close = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.tcp_listen_options.send_timeout  = 120")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Proxy protocol support")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.proxy_protocol = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS listeners")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See https://rabbitmq.com/stomp.html and https://rabbitmq.com/ssl.html for details.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.listeners.ssl.default = 61614")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.cacertfile = path/to/cacert.pem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.certfile   = path/to/cert.pem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.keyfile    = path/to/key.pem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.verify     =  verify_peer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ssl_options.fail_if_no_peer_cert = true")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Number of Erlang processes that will accept connections for the TCP")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## and TLS listeners.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.num_acceptors.tcp = 10")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.num_acceptors.ssl = 1")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Additional TLS options")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Extract a name from the client's certificate when using TLS.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.ssl_cert_login = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set a default user name and password. This is used as the default login")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## whenever a CONNECT frame omits the login and passcode headers.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Please note that setting this will allow clients to connect without")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## authenticating!")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.default_user = guest")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.default_pass = guest")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If a default user is configured, or you have configured use TLS client")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## certificate based authentication, you can choose to allow clients to")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## omit the CONNECT frame entirely. If set to true, the client is")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## automatically connected as the default user or user supplied in the")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS certificate whenever the first frame sent on a session is not a")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONNECT frame.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.implicit_connect = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether or not to enable proxy protocol support.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Once enabled, clients cannot directly connect to the broker")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## anymore. They must connect through a load balancer that sends the")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## proxy protocol header to the broker at connection time.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This setting applies only to STOMP clients, other protocols")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## like MQTT or AMQP have their own setting to enable proxy protocol.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See the plugins or broker documentation for more information.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stomp.proxy_protocol = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## RabbitMQ MQTT Adapter")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See https://github.com/rabbitmq/rabbitmq-mqtt/blob/stable/README.md")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## for details")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =======================================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# MQTT section")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =======================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TCP listener settings.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.listeners.tcp.1 = 127.0.0.1:61613")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.listeners.tcp.2 = ::1:61613")]),t._v("\nmqtt.listeners.tcp.default = "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5040")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TCP listener options (as per the broker configuration).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.tcp_listen_options.backlog = 4096")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.tcp_listen_options.recbuf  = 131072")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.tcp_listen_options.sndbuf  = 131072")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.tcp_listen_options.keepalive = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.tcp_listen_options.nodelay   = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.tcp_listen_options.exit_on_close = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.tcp_listen_options.send_timeout  = 120")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS listener settings")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ## See https://rabbitmq.com/mqtt.html and https://rabbitmq.com/ssl.html for details.")]),t._v("\nmqtt.listeners.ssl.default = 5060\n\nssl_options.password   = dc3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server\nssl_options.cacertfile = /data/rabbitmq/dc3/node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("01/keys/ca.crt\nssl_options.certfile   = /data/rabbitmq/dc3/node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("01/keys/server.crt\nssl_options.keyfile    = /data/rabbitmq/dc3/node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("01/keys/server.key\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Number of Erlang processes that will accept connections for the TCP")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## and TLS listeners.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.num_acceptors.tcp = 10")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.num_acceptors.ssl = 10")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether or not to enable proxy protocol support.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Once enabled, clients cannot directly connect to the broker")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## anymore. They must connect through a load balancer that sends the")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## proxy protocol header to the broker at connection time.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This setting applies only to STOMP clients, other protocols")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## like STOMP or AMQP have their own setting to enable proxy protocol.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See the plugins or broker documentation for more information.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.proxy_protocol = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set the default user name and password used for anonymous connections (when client")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## provides no credentials). Anonymous connections are highly discouraged!")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\nmqtt.default_user = dc3\nmqtt.default_pass = dc3\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable anonymous connections. If this is set to false, clients MUST provide")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## credentials in order to connect. See also the mqtt.default_user/mqtt.default_pass")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## keys. Anonymous connections are highly discouraged!")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\nmqtt.allow_anonymous = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If you have multiple vhosts, specify the one to which the")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## adapter connects.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\nmqtt.vhost = /dc3\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the exchange to which messages from MQTT clients are published.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\nmqtt.exchange = dc3.exchange.mqtt\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify TTL (time to live) to control the lifetime of non-clean sessions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.subscription_ttl = 1800000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set the prefetch count (governing the maximum number of unacknowledged")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## messages that will be delivered).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt.prefetch = 10")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## RabbitMQ AMQP 1.0 Support")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See https://github.com/rabbitmq/rabbitmq-amqp1.0/blob/stable/README.md.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =======================================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# AMQP 1.0 section")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =======================================")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Connections that are not authenticated with SASL will connect as this")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## account. See the README for more information.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Please note that setting this will allow clients to connect without")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## authenticating!")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# amqp1_0.default_user = guest")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable protocol strict mode. See the README for more information.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# amqp1_0.protocol_strict_mode = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Logging settings.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See https://rabbitmq.com/logging.html for details.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log directory, taken from the RABBITMQ_LOG_BASE env variable by default.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log.dir = /var/log/rabbitmq")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Logging to file. Can be false or a filename.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log.file = rabbit.log")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To disable logging to a file")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log.file = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log level for file logging")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log.file.level = info")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## File rotation config. No rotation by default.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## DO NOT SET rotation date to ''. Leave the value unset if \"\" is the desired value")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log.file.rotation.date = $D0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log.file.rotation.size = 0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Logging to console (can be true or false)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log.console = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log level for console logging")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log.console.level = info")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Logging to the amq.rabbitmq.log exchange (can be true or false)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log.exchange = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log level to use when logging to the amq.rabbitmq.log exchange")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log.exchange.level = info")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## RabbitMQ LDAP Plugin")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/ldap.html.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ----------------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =======================================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# LDAP section")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =======================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Connecting to the LDAP server(s)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ================================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify servers to bind to. You *must* set this in order for the plugin")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## to work properly.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.servers.1 = your-server-name-goes-here")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## You can define multiple servers")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.servers.2 = your-other-server")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Connect to the LDAP server using TLS")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.use_ssl = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the LDAP port to connect to")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.port = 389")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## LDAP connection timeout, in milliseconds or 'infinity'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.timeout = infinity")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Or number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.timeout = 500")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable logging of LDAP queries.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## One of")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - false (no logging is performed)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - true (verbose logging of the logic used by the plugin)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - network (as true, but additionally logs LDAP network traffic)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Defaults to false.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.log = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Also can be true or network")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.log = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.log = network")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Authentication")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ==============")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Pattern to convert the username given through AMQP to a DN before")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## binding")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.user_dn_pattern = cn=${username},ou=People,dc=example,dc=com")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Alternatively, you can convert a username to a Distinguished")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Name via an LDAP lookup after binding. See the documentation for")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## full details.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## When converting a username to a dn via a lookup, set these to")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the name of the attribute that represents the user name, and the")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## base DN for the lookup query.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.dn_lookup_attribute = userPrincipalName")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.dn_lookup_base      = DC=gopivotal,DC=com")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Controls how to bind for authorisation queries and also to")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## retrieve the details of users logging in without presenting a")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## password (e.g., SASL EXTERNAL).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## One of")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - as_user (to bind as the authenticated user - requires a password)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - anon    (to bind anonymously)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - {UserDN, Password} (to bind with a specified user name and password)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Defaults to 'as_user'.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.other_bind = as_user")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Or can be more complex:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.other_bind.user_dn  = User")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# auth_ldap.other_bind.password = Password")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If user_dn and password defined - other options is ignored.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -----------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Too complex section of LDAP")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -----------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Authorisation")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## =============")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The LDAP plugin can perform a variety of queries against your")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## LDAP server to determine questions of authorisation.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Related doc guide: https://rabbitmq.com/ldap.html#authorisation.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Following configuration should be defined in advanced.config file")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## DO NOT UNCOMMENT THESE LINES!")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set the query to use when determining vhost access")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## {vhost_access_query, {in_group,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('##                       "ou=${vhost}-users,ou=vhosts,dc=example,dc=com"}},')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set the query to use when determining resource (e.g., queue) access")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## {resource_access_query, {constant, true}},")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set queries to determine which tags a user has")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## {tag_queries, []}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   ]},")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -----------------------------")]),t._v("\n")])])]),e("h5",{attrs:{id:"_4-2-3-rabbitmq-env-conf"}},[t._v("4.2.3 "),e("code",[t._v("rabbitmq-env.conf")]),t._v(" "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-rabbitmq-env-conf"}},[t._v("#")])]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example rabbitmq-env.conf file entries. Note that the variables")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do not have the RABBITMQ_ prefix.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Overrides node name")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#NODENAME=rabbit@$HOSTNAME")]),t._v("\nNODENAME=node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("01@localhost\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# overrides primary config file location")]),t._v("\nCONFIG_FILE=$RABBITMQ_HOME/etc/rabbitmq/rabbitmq.conf\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# overrides advanced config file location")]),t._v("\nADVANCED_CONFIG_FILE=$RABBITMQ_HOME/etc/rabbitmq/advanced.config\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# overrides environment variable file location")]),t._v("\nCONF_ENV_FILE=$RABBITMQ_HOME/etc/rabbitmq/rabbitmq"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("env.conf\n")])])]),e("h5",{attrs:{id:"_4-2-4-enabled-plugins"}},[t._v("4.2.4 "),e("code",[t._v("enabled_plugins")]),t._v(" "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-4-enabled-plugins"}},[t._v("#")])]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rabbitmq_management"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rabbitmq_mqtt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(".\n")])])]),e("h4",{attrs:{id:"_4-3-启动"}},[t._v("4.3 启动 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-启动"}},[t._v("#")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("/data/rabbitmq/dc3/node-01/sbin/rabbitmq-server "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-detached")]),t._v("\n\n/data/rabbitmq/dc3/node-02/sbin/rabbitmq-server "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-detached")]),t._v("\n\n/data/rabbitmq/dc3/node-03/sbin/rabbitmq-server "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-detached")]),t._v("\n")])])]),e("h4",{attrs:{id:"_4-4-节点配置"}},[t._v("4.4 节点配置 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-节点配置"}},[t._v("#")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("配置 "),e("code",[t._v("节点2")]),t._v(" 加入 "),e("code",[t._v("节点1")])])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("/data/rabbitmq/dc3/node-01/sbin/rabbitmqctl "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" node-02@localhost stop_app\n\n/data/rabbitmq/dc3/node-01/sbin/rabbitmqctl "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" node-02@localhost reset\n\n/data/rabbitmq/dc3/node-01/sbin/rabbitmqctl "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" node-02@localhost join_cluster node-01@localhost\n\n/data/rabbitmq/dc3/node-01/sbin/rabbitmqctl "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" node-02@localhost start_app\n")])])]),e("blockquote",[e("p",[e("strong",[t._v("配置 "),e("code",[t._v("节点3")]),t._v(" 加入 "),e("code",[t._v("节点1")])])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("/data/rabbitmq/dc3/node-01/sbin/rabbitmqctl "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" node-03@localhost stop_app\n\n/data/rabbitmq/dc3/node-01/sbin/rabbitmqctl "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" node-03@localhost reset\n\n/data/rabbitmq/dc3/node-01/sbin/rabbitmqctl "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" node-03@localhost join_cluster node-01@localhost\n\n/data/rabbitmq/dc3/node-01/sbin/rabbitmqctl "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" node-03@localhost start_app\n")])])]),e("blockquote",[e("p",[e("strong",[t._v("节点状态")])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("/data/rabbitmq/dc3/node-01/sbin/rabbitmq-diagnostics status\n\n/data/rabbitmq/dc3/node-02/sbin/rabbitmq-diagnostics status\n\n/data/rabbitmq/dc3/node-03/sbin/rabbitmq-diagnostics status\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);