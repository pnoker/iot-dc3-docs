(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{708:function(e,t,s){"use strict";s.r(t);var n=s(62),a=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"redis-集群部署"}},[t("code",[e._v("Redis")]),e._v(" 集群部署 "),t("a",{staticClass:"header-anchor",attrs:{href:"#redis-集群部署"}},[e._v("#")])]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Redis 3.0")]),e._v(" 版本后正式推出 "),t("code",[e._v("Redis")]),e._v(" 集群模式，该模式是 "),t("code",[e._v("Redis")]),e._v(" 的分布式的解决方案，是一个提供在多个 "),t("code",[e._v("Redis")]),e._v(" 节点间共享数据的程序集，且 "),t("code",[e._v("Redis")]),e._v(" 集群是去中心化的，它的每个 "),t("code",[e._v("Master")]),e._v(" 节点都可以进行读写数据，每个节点都拥有平等的关系，每个节点都保持各自的数据和整个集群的状态。")])]),e._v(" "),t("h3",{attrs:{id:"_1-集群架构"}},[e._v("1. 集群架构 "),t("a",{staticClass:"header-anchor",attrs:{href:"#_1-集群架构"}},[e._v("#")])]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/images/dc3/cluster/redis/redis-1.png",alt:""}})]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Redis")]),e._v(" 集群没有使用一致性 "),t("code",[e._v("Hash")]),e._v(', 而是引入了"哈希槽"的概念。'),t("code",[e._v("Redis")]),e._v(" 集群有 "),t("code",[e._v("16384")]),e._v(" 个哈希槽，每个 "),t("code",[e._v("key")]),e._v("通过 "),t("code",[e._v("CRC16")]),e._v(" 校验后对 "),t("code",[e._v("16384")]),e._v(" 取模来决定放置哪个槽，集群的每个节点负责一部分 "),t("code",[e._v("hash")]),e._v(" 槽。")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("节点 A")]),e._v(" 包含 "),t("code",[e._v("0")]),e._v(" 到 "),t("code",[e._v("5460")]),e._v(" 号哈希槽；")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("节点 B")]),e._v(" 包含 "),t("code",[e._v("5461")]),e._v(" 到 "),t("code",[e._v("10922")]),e._v(" 号哈希槽；")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("节点 C")]),e._v(" 包含 "),t("code",[e._v("10923")]),e._v(" 到 "),t("code",[e._v("16383")]),e._v(" 号哈希槽。")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/images/dc3/cluster/redis/redis-2.png",alt:""}})]),e._v(" "),t("p",[e._v('这种结构很容易 "'),t("code",[e._v("添加")]),e._v('" 或者 "'),t("code",[e._v("删除")]),e._v('" 节点. 比如如果我想新添加个 '),t("code",[e._v("节点 D")]),e._v("，我需要从节点 "),t("code",[e._v("A")]),e._v(", "),t("code",[e._v("B")]),e._v(", "),t("code",[e._v("C")]),e._v(" 中得部分槽转移到 "),t("code",[e._v("节点 D")]),e._v(" 上， 如果我想移除 "),t("code",[e._v("节点 A")]),e._v("，则需要将 "),t("code",[e._v("A")]),e._v(" 中的槽移到 "),t("code",[e._v("B")]),e._v(" 和 "),t("code",[e._v("C")]),e._v(" 节点上，然后将没有任何槽的 "),t("code",[e._v("A")]),e._v(" 节点从集群中移除即可。由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态。")])]),e._v(" "),t("h3",{attrs:{id:"_2-集群部署规划"}},[e._v("2. 集群部署规划 "),t("a",{staticClass:"header-anchor",attrs:{href:"#_2-集群部署规划"}},[e._v("#")])]),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("在部署 "),t("code",[e._v("Redis")]),e._v(" 集群模式时，至少需要六个节点组成集群才能保证集群的可用性。")])]),e._v(" "),t("p",[e._v("在 "),t("code",[e._v("Redis")]),e._v(" 集群模式下，为了防止集群部分节点因宕机等情况造成不可用，故而 "),t("code",[e._v("Redis")]),e._v(" 集群使用了主从复制模式。在该模式下要求 "),t("code",[e._v("Redis")]),e._v(" 集群至少要存在六个节点，其中三个节点为主节点，能够对外提供读写。还有三个节点为从节点，会同步其对应的主节点的数据。当某个主节点出现问题不可用时，"),t("code",[e._v("Redis")]),e._v(" 将通过选举算法从主节点对应的从节点中选择一个节点（主节点存在多个从节点的情况下），将其更改为一个新的主节点，且能够对外提供服务。")]),e._v(" "),t("p",[e._v("例如，在存在 "),t("code",[e._v("A")]),e._v("，"),t("code",[e._v("B")]),e._v("，"),t("code",[e._v("C")]),e._v(" 三个主节点和其对应的 （"),t("code",[e._v("A1")]),e._v("、"),t("code",[e._v("A2")]),e._v("），（"),t("code",[e._v("B1")]),e._v("、"),t("code",[e._v("B2")]),e._v("），（"),t("code",[e._v("C1")]),e._v("、"),t("code",[e._v("C2")]),e._v("） 六个从节点，共九个节点中，如果节点 "),t("code",[e._v("A")]),e._v(" 节点挂掉，那么其对应的从节点 "),t("code",[e._v("A1")]),e._v("、"),t("code",[e._v("A2")]),e._v(" 节点将通过选举算法，选择其中一个节点提升为主节点，以确保集群能够正常服务。不过当 "),t("code",[e._v("A1")]),e._v("、"),t("code",[e._v("A2")]),e._v(" 两个从节点或者或者半数以上主节点不可用时，那么集群也是不可用的。")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[t("code",[e._v("name")])]),e._v(" "),t("th",{staticStyle:{"text-align":"center"}},[t("code",[e._v("ip")])]),e._v(" "),t("th",{staticStyle:{"text-align":"center"}},[t("code",[e._v("node 1")])]),e._v(" "),t("th",{staticStyle:{"text-align":"center"}},[t("code",[e._v("node 2")])])])]),e._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("code",[e._v("master-01")])]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("127.0.0.1")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("6100")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("6101")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("code",[e._v("master-02")])]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("127.0.0.1")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("6200")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("6201")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("code",[e._v("master-03")])]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("127.0.0.1")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("6300")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("6301")])])])]),e._v(" "),t("h3",{attrs:{id:"_3-安装文件"}},[e._v("3. 安装文件 "),t("a",{staticClass:"header-anchor",attrs:{href:"#_3-安装文件"}},[e._v("#")])]),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("下载源码")])])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("以 "),t("code",[e._v("6.2.6")]),e._v(" 版本为例： https://download.redis.io/releases/redis-6.2.6.tar.gz")])]),e._v(" "),t("li",[t("p",[e._v("其他版本下载：https://redis.io/download")])])]),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("构建源码")])]),e._v(" "),t("p",[e._v("将在 "),t("code",[e._v("src")]),e._v(" 目录下生成可执行文件")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" xzf redis-6.2.6.tar.gz\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" redis-6.2.6\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v("\n")])])]),t("h3",{attrs:{id:"_4-集群部署"}},[e._v("4. 集群部署 "),t("a",{staticClass:"header-anchor",attrs:{href:"#_4-集群部署"}},[e._v("#")])]),e._v(" "),t("h4",{attrs:{id:"_4-1-创建文件目录"}},[e._v("4.1 创建文件目录 "),t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-创建文件目录"}},[e._v("#")])]),e._v(" "),t("blockquote",[t("p",[e._v("分别创建三个节点（"),t("code",[e._v("master")]),e._v("）目录，多个以此类推 "),t("code",[e._v("master-N")])]),e._v(" "),t("p",[e._v("每个 master 目录中创建 两个节点（"),t("code",[e._v("node")]),e._v("）目录，多个以此类推 "),t("code",[e._v("node-N")])])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /data\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" redis/dc3/master-01 redis/dc3/master-02 redis/dc3/master-03\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" redis/dc3/master-01/node-01 redis/dc3/master-01/node-02 redis/dc3/master-02/node-01 redis/dc3/master-02/node-02 redis/dc3/master-03/node-01 redis/dc3/master-03/node-02\n")])])]),t("blockquote",[t("p",[e._v("为每个节点创建配置、数据、日志目录，其他节点操作一致")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" node-N\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" data etc logs\n")])])]),t("h4",{attrs:{id:"_4-2-配置文件"}},[e._v("4.2 配置文件 "),t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-配置文件"}},[e._v("#")])]),e._v(" "),t("blockquote",[t("p",[e._v("在每个节点的 "),t("code",[e._v("etc")]),e._v(" 下添加配置文件 "),t("code",[e._v("redis.conf")])])]),e._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Copyright (c) 2022. Pnoker. All Rights Reserved.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Licensed under the Apache License, Version 2.0 (the "License");')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# you may not use this file except in compliance with the License.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# You may obtain a copy of the License at")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     http://www.apache.org/licenses/LICENSE-2.0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Unless required by applicable law or agreed to in writing, software")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# distributed under the License is distributed on an "AS IS" BASIS,')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# See the License for the specific language governing permissions and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# limitations under the License.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis configuration file example.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that in order to read the configuration file, Redis must be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# started with the file path as first argument:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ./redis-server /path/to/redis.conf")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note on units: when memory size is needed, it is possible to specify")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# it in the usual form of 1k 5GB 4M and so forth:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1k => 1000 bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1kb => 1024 bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1m => 1000000 bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1mb => 1024*1024 bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1g => 1000000000 bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1gb => 1024*1024*1024 bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# units are case insensitive so 1GB 1Gb 1gB are all the same.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################## INCLUDES ###################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Include one or more other config files here.  This is useful if you")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# have a standard template that goes to all Redis servers but also need")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to customize a few per-server settings.  Include files can include")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# other files, so use this wisely.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Note that option "include" won\'t be rewritten by command "CONFIG REWRITE"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# from admin or Redis Sentinel. Since Redis always uses the last processed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# line as value of a configuration directive, you'd better put includes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# at the beginning of this file to avoid overwriting config change at runtime.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If instead you are interested in using includes to override configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# options, it is better to use include as the last line.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# include /path/to/local.conf")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# include /path/to/other.conf")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################## MODULES #####################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Load modules at startup. If the server is not able to load modules")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# it will abort. It is possible to use multiple loadmodule directives.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# loadmodule /path/to/my_module.so")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# loadmodule /path/to/other_module.so")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################## NETWORK #####################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# By default, if no "bind" configuration directive is specified, Redis listens')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for connections from all available network interfaces on the host machine.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It is possible to listen to just one or multiple selected interfaces using")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# the "bind" configuration directive, followed by one or more IP addresses.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Each address can be prefixed by "-", which means that redis will not fail to')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# start if the address is not available. Being not available only refers to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# addresses that does not correspond to any network interfece. Addresses that")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# are already in use will always fail, and unsupported protocols will always BE")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# silently skipped.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Examples:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bind * -::*                     # like the default, all available interfaces")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# internet, binding to all the interfaces is dangerous and will expose the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# instance to everybody on the internet. So by default we uncomment the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# following bind directive, that will force Redis to listen only on the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# IPv4 and IPv6 (if available) loopback interface addresses (this means Redis")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will only be able to accept client connections from the same host that it is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# running on).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# JUST COMMENT OUT THE FOLLOWING LINE.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bind 127.0.0.1 -::1")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Protected mode is a layer of security protection, in order to avoid that")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis instances left open on the internet are accessed and exploited.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When protected mode is on and if:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1) The server is not binding explicitly to a set of addresses using the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#    "bind" directive.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2) No password is configured.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The server only accepts connections from clients connecting from the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# sockets.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default protected mode is enabled. You should disable it only if")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# you are sure you want clients from other hosts to connect to Redis")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# even if no authentication is configured, nor a specific set of interfaces")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# are explicitly listed using the "bind" directive.')]),e._v("\nprotected"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("mode yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Accept connections on the specified port, default is 6379 (IANA #815344).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If port 0 is specified Redis will not listen on a TCP socket.")]),e._v("\nport 6100\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# TCP listen() backlog.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In high requests-per-second environments you need a high backlog in order")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to avoid slow clients connection issues. Note that the Linux kernel")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will silently truncate it to the value of /proc/sys/net/core/somaxconn so")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# make sure to raise both the value of somaxconn and tcp_max_syn_backlog")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in order to get the desired effect.")]),e._v("\ntcp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("backlog 511\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Unix socket.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Specify the path for the Unix socket that will be used to listen for")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# incoming connections. There is no default, so Redis will not listen")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# on a unix socket when not specified.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# unixsocket /run/redis.sock")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# unixsocketperm 700")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Close the connection after a client is idle for N seconds (0 to disable)")]),e._v("\ntimeout 0\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# TCP keepalive.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of communication. This is useful for two reasons:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1) Detect dead peers.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2) Force network equipment in the middle to consider the connection to be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    alive.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On Linux, the specified value (in seconds) is the period used to send ACKs.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that to close the connection the double of the time is needed.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On other kernels the period depends on the kernel configuration.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A reasonable value for this option is 300 seconds, which is the new")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis default starting with Redis 3.2.1.")]),e._v("\ntcp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("keepalive 300\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################# TLS/SSL #####################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# By default, TLS/SSL is disabled. To enable it, the "tls-port" configuration')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# directive can be used to define TLS-listening ports. To enable TLS on the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# default port, use:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# port 0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-port 6379")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Configure a X.509 certificate and private key to use for authenticating the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# server to connected clients, masters or cluster peers.  These files should be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# PEM formatted.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-cert-file redis.crt")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-key-file redis.key")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If the key file is encrypted using a passphrase, it can be included here")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# as well.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-key-file-pass secret")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Normally Redis uses the same certificate for both server functions (accepting")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# connections) and client functions (replicating from a master, establishing")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster bus connections, etc.).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Sometimes certificates are issued with attributes that designate them as")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# client-only or server-only certificates. In that case it may be desired to use")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# different certificates for incoming (server) and outgoing (client)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# connections. To do that, use the following directives:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-client-cert-file client.crt")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-client-key-file client.key")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If the key file is encrypted using a passphrase, it can be included here")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# as well.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-client-key-file-pass secret")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Configure a DH parameters file to enable Diffie-Hellman (DH) key exchange:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-dh-params-file redis.dh")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Configure a CA certificate(s) bundle or directory to authenticate TLS/SSL")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# clients and peers.  Redis requires an explicit configuration of at least one")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of these, and will not implicitly use the system wide configuration.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-ca-cert-file ca.crt")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-ca-cert-dir /etc/ssl/certs")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default, clients (including replica servers) on a TLS port are required")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to authenticate using valid client side certificates.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# If "no" is specified, client certificates are not required and not accepted.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# If "optional" is specified, client certificates are accepted and must be')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# valid if provided, but are not required.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-auth-clients no")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-auth-clients optional")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default, a Redis replica does not attempt to establish a TLS connection")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# with its master.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Use the following directive to enable TLS on replication links.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-replication yes")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default, the Redis Cluster bus uses a plain TCP connection. To enable")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# TLS for the bus protocol, use the following directive:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-cluster yes")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default, only TLSv1.2 and TLSv1.3 are enabled and it is highly recommended")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# that older formally deprecated versions are kept disabled to reduce the attack surface.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# You can explicitly specify TLS versions to support.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Allowed values are case insensitive and include "TLSv1", "TLSv1.1", "TLSv1.2",')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "TLSv1.3" (OpenSSL >= 1.1.1) or any combination.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To enable only TLSv1.2 and TLSv1.3, use:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# tls-protocols "TLSv1.2 TLSv1.3"')]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Configure allowed ciphers.  See the ciphers(1ssl) manpage for more information")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# about the syntax of this string.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note: this configuration applies only to <= TLSv1.2.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-ciphers DEFAULT:!MEDIUM")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Configure allowed TLSv1.3 ciphersuites.  See the ciphers(1ssl) manpage for more")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# information about the syntax of this string, and specifically for TLSv1.3")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ciphersuites.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When choosing a cipher, use the server's preference instead of the client")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# preference. By default, the server follows the client's preference.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-prefer-server-ciphers yes")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default, TLS session caching is enabled to allow faster and less expensive")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# reconnections by clients that support it. Use the following directive to disable")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# caching.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-session-caching no")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Change the default number of TLS sessions cached. A zero value sets the cache")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to unlimited size. The default size is 20480.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-session-cache-size 5000")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Change the default timeout of cached TLS sessions. The default timeout is 300")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# seconds.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls-session-cache-timeout 60")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################# GENERAL #####################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default Redis does not run as a daemon. Use 'yes' if you need it.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When Redis is supervised by upstart or systemd, this parameter has no impact.")]),e._v("\ndaemonize yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If you run Redis from upstart or systemd, Redis can interact with your")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# supervision tree. Options:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   supervised no      - no supervision interaction")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#                        requires "expect stop" in your upstart job config')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                        on startup, and updating Redis status on a regular")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                        basis.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   supervised auto    - detect upstart or systemd method based on")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                        UPSTART_JOB or NOTIFY_SOCKET environment variables")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Note: these supervision methods only signal "process is ready."')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#       They do not enable continuous pings back to your supervisor.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The default is "no". To run under upstart/systemd, you can simply uncomment')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the line below:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# supervised auto")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If a pid file is specified, Redis writes it where specified at startup")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and removes it at exit.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When the server runs non daemonized, no pid file is created if none is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# specified in the configuration. When the server is daemonized, the pid file")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# is used even if not specified, defaulting to "/var/run/redis.pid".')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Creating a pid file is best effort: if Redis is not able to create it")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# nothing bad happens, the server will start and run normally.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Note that on modern Linux systems "/run/redis.pid" is more conforming')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and should be used instead.")]),e._v("\npidfile /data/redis/dc3/master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("01/node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("01/redis.pid\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Specify the server verbosity level.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This can be one of:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# debug (a lot of information, useful for development/testing)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# verbose (many rarely useful info, but not a mess like the debug level)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# notice (moderately verbose, what you want in production probably)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# warning (only very important / critical messages are logged)")]),e._v("\nloglevel notice\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Specify the log file name. Also the empty string can be used to force")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis to log on the standard output. Note that if you use standard")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# output for logging but daemonize, logs will be sent to /dev/null")]),e._v("\nlogfile /data/redis/dc3/master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("01/node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("01/logs/redis.log\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To enable logging to the system logger, just set 'syslog-enabled' to yes,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and optionally update the other syslog parameters to suit your needs.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# syslog-enabled no")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Specify the syslog identity.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# syslog-ident redis")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# syslog-facility local0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To disable the built in crash log, which will possibly produce cleaner core")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# dumps when they are needed, uncomment the following:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# crash-log-enabled no")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To disable the fast memory check that's run as part of the crash log, which")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will possibly let redis terminate sooner, uncomment the following:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# crash-memcheck-enabled no")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set the number of databases. The default database is DB 0, you can select")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a different one on a per-connection basis using SELECT <dbid> where")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# dbid is a number between 0 and 'databases'-1")]),e._v("\ndatabases 16\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default Redis shows an ASCII art logo only when started to log to the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# standard output and if the standard output is a TTY and syslog logging is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# disabled. Basically this means that normally a logo is displayed only in")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# interactive sessions.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# However it is possible to force the pre-4.0 behavior and always show a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ASCII art logo in startup logs by setting the following option to yes.")]),e._v("\nalways"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("show"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("logo no\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default, Redis modifies the process title (as seen in 'top' and 'ps') to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# provide some runtime information. It is possible to disable this and leave")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the process name as executed by setting the following to no.")]),e._v("\nset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("proc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("title yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When changing the process title, Redis uses the following template to construct")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the modified title.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Template variables are specified in curly brackets. The following variables are")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# supported:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# {title}           Name of process as executed if parent, or type of child process.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# {listen-addr}     Bind address or '*' followed by TCP or TLS port listening on, or")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                   Unix socket if only that's available.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# {server-mode}     Special mode, i.e. "[sentinel]" or "[cluster]".')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# {port}            TCP port listening on, or 0.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# {tls-port}        TLS port listening on, or 0.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# {unixsocket}      Unix domain socket listening on, or "".')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# {config-file}     Name of configuration file used.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\nproc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("title"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v('template "'),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("title"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("listen"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("addr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("server"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("mode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v('"\n\n'),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################ SNAPSHOTTING  ################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Save the DB to disk.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# save <seconds> <changes>")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis will save the DB if both the given number of seconds and the given")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# number of write operations against the DB occurred.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Snapshotting can be completely disabled with a single empty string argument")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# as in following example:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# save ""')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Unless specified otherwise, by default Redis will save the DB:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   * After 3600 seconds (an hour) if at least 1 key changed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   * After 300 seconds (5 minutes) if at least 100 keys changed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   * After 60 seconds if at least 10000 keys changed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# You can set these explicitly by uncommenting the three following lines.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\nsave 3600 1\nsave 300  100\nsave 60   10000\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default Redis will stop accepting writes if RDB snapshots are enabled")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# (at least one save point) and the latest background save failed.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This will make the user aware (in a hard way) that data is not persisting")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# on disk properly, otherwise chances are that no one will notice and some")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# disaster will happen.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If the background saving process will start working again Redis will")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# automatically allow writes again.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# However if you have setup your proper monitoring of the Redis server")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and persistence, you may want to disable this feature so that Redis will")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# continue to work as usual even if there are problems with disk,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# permissions, and so forth.")]),e._v("\nstop"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("writes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("on"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("bgsave"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("error yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Compress string objects using LZF when dump .rdb databases?")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default compression is enabled as it's almost always a win.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If you want to save some CPU in the saving child set it to 'no' but")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the dataset will likely be bigger if you have compressible values or keys.")]),e._v("\nrdbcompression yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This makes the format more resistant to corruption but there is a performance")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# hit to pay (around 10%) when saving and loading RDB files, so you can disable it")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for maximum performances.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# RDB files created with checksum disabled have a checksum of zero that will")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tell the loading code to skip the check.")]),e._v("\nrdbchecksum yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enables or disables full sanitation checks for ziplist and listpack etc when")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# loading an RDB or RESTORE payload. This reduces the chances of a assertion or")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# crash later on while processing commands.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Options:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   no         - Never perform full sanitation")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   yes        - Always perform full sanitation")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   clients    - Perform full sanitation only for user connections.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                Excludes: RDB files, RESTORE commands received from the master")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                connection, and client connections which have the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                skip-sanitize-payload ACL flag.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The default should be 'clients' but since it currently affects cluster")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# resharding via MIGRATE, it is temporarily set to 'no' by default.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# sanitize-dump-payload no")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The filename where to dump the DB")]),e._v("\ndbfilename dump.rdb\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Remove RDB files used by replication in instances without persistence")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# enabled. By default this option is disabled, however there are environments")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# where for regulations or other security concerns, RDB files persisted on")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# disk by masters in order to feed replicas, or stored on disk by replicas")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in order to load them for the initial synchronization, should be deleted")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ASAP. Note that this option ONLY WORKS in instances that have both AOF")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and RDB persistence disabled, otherwise is completely ignored.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# An alternative (and sometimes better) way to obtain the same effect is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to use diskless replication on both master and replicas instances. However")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in the case of replicas, diskless is not always an option.")]),e._v("\nrdb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("del"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("sync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("files no\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The working directory.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The DB will be written inside this directory, with the filename specified")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# above using the 'dbfilename' configuration directive.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The Append Only File will also be created inside this directory.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that you must specify a directory here, not a file name.")]),e._v("\ndir /data/redis/dc3/master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("01/node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("01/data/\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################# REPLICATION #################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Master-Replica replication. Use replicaof to make a Redis instance a copy of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# another Redis server. A few things to understand ASAP about Redis replication.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   +------------------+      +---------------+")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   |      Master      | ---\x3e |    Replica    |")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   | (receive writes) |      |  (exact copy) |")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   +------------------+      +---------------+")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1) Redis replication is asynchronous, but you can configure a master to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    stop accepting writes if it appears to be not connected with at least")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    a given number of replicas.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2) Redis replicas are able to perform a partial resynchronization with the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    master if the replication link is lost for a relatively small amount of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    time. You may want to configure the replication backlog size (see the next")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    sections of this file) with a sensible value depending on your needs.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3) Replication is automatic and does not need user intervention. After a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    network partition replicas automatically try to reconnect to masters")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    and resynchronize with them.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replicaof <masterip> <masterport>")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# If the master is password protected (using the "requirepass" configuration')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# directive below) it is possible to tell the replica to authenticate before")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# starting the replication synchronization process, otherwise the master will")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# refuse the replica request.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# masterauth <master-password>")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# However this is not enough if you are using Redis ACLs (for Redis version")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 6 or greater), and the default user is not capable of running the PSYNC")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# command and/or other commands needed for replication. In this case it's")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# better to configure a special user to use with replication, and specify the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# masteruser configuration as such:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# masteruser <username>")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When masteruser is specified, the replica will authenticate against its")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# master using the new AUTH form: AUTH <username> <password>.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When a replica loses its connection with the master, or when the replication")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# is still in progress, the replica can act in two different ways:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1) if replica-serve-stale-data is set to 'yes' (the default) the replica will")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    still reply to client requests, possibly with out of date data, or the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    data set may just be empty if this is the first synchronization.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2) If replica-serve-stale-data is set to 'no' the replica will reply with")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#    an error "SYNC with master in progress" to all commands except:')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    INFO, REPLICAOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    HOST and LATENCY.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\nreplica"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("serve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("stale"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("data yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# You can configure a replica instance to accept writes or not. Writing against")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a replica instance may be useful to store some ephemeral data (because data")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# written on a replica will be easily deleted after resync with the master) but")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# may also cause problems if clients are writing to it because of a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# misconfiguration.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Since Redis 2.6 by default replicas are read-only.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note: read only replicas are not designed to be exposed to untrusted clients")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# on the internet. It's just a protection layer against misuse of the instance.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Still a read only replica exports by default all the administrative commands")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# security of read only replicas using 'rename-command' to shadow all the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# administrative / dangerous commands.")]),e._v("\nreplica"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("read"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("only yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Replication SYNC strategy: disk or socket.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# New replicas and reconnecting replicas that are not able to continue the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replication process just receiving differences, need to do what is called a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "full synchronization". An RDB file is transmitted from the master to the')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replicas.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The transmission can happen in two different ways:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1) Disk-backed: The Redis master creates a new process that writes the RDB")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                 file on disk. Later the file is transferred by the parent")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                 process to the replicas incrementally.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2) Diskless: The Redis master creates a new process that directly writes the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#              RDB file to replica sockets, without touching the disk at all.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# With disk-backed replication, while the RDB file is generated, more replicas")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# can be queued and served with the RDB file as soon as the current child")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# producing the RDB file finishes its work. With diskless replication instead")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# once the transfer starts, new replicas arriving will be queued and a new")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# transfer will start when the current one terminates.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When diskless replication is used, the master waits a configurable amount of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# time (in seconds) before starting the transfer in the hope that multiple")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replicas will arrive and the transfer can be parallelized.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# With slow disks and fast (large bandwidth) networks, diskless replication")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# works better.")]),e._v("\nrepl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("diskless"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("sync no\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When diskless replication is enabled, it is possible to configure the delay")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the server waits in order to spawn the child that transfers the RDB via socket")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to the replicas.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This is important since once the transfer starts, it is not possible to serve")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# new replicas arriving, that will be queued for the next RDB transfer, so the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# server waits a delay in order to let more replicas arrive.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The delay is specified in seconds, and by default is 5 seconds. To disable")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# it entirely just set it to 0 seconds and the transfer will start ASAP.")]),e._v("\nrepl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("diskless"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("sync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("delay 5\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -----------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# WARNING: RDB diskless load is experimental. Since in this setup the replica")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# does not immediately store an RDB on disk, it may cause data loss during")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# failovers. RDB diskless load + Redis modules not handling I/O reads may also")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cause Redis to abort in case of I/O errors during the initial synchronization")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# stage with the master. Use only if you know what you are doing.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -----------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Replica can load the RDB it reads from the replication link directly from the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# socket, or store the RDB to a file and read that file after it was completely")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# received from the master.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In many cases the disk is slower than the network, and storing and loading")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the RDB file may increase replication time (and even increase the master's")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Copy on Write memory and salve buffers).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# However, parsing the RDB file directly from the socket may mean that we have")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to flush the contents of the current database before the full rdb was")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# received. For this reason we have the following options:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "disabled"    - Don\'t use diskless load (store the rdb file to the disk first)')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "on-empty-db" - Use diskless load only when it is completely safe.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "swapdb"      - Keep a copy of the current db contents in RAM while parsing')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                 the data directly from the socket. note that this requires")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                 sufficient memory, if you don't have it, you risk an OOM kill.")]),e._v("\nrepl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("diskless"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("load disabled\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Replicas send PINGs to server in a predefined interval. It's possible to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# change this interval with the repl_ping_replica_period option. The default")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# value is 10 seconds.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# repl-ping-replica-period 10")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The following option sets the replication timeout for:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1) Bulk transfer I/O during SYNC, from the point of view of replica.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2) Master timeout from the point of view of replicas (data, pings).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It is important to make sure that this value is greater than the value")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# specified for repl-ping-replica-period otherwise a timeout will be detected")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# every time there is low traffic between the master and the replica. The default")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# value is 60 seconds.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# repl-timeout 60")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Disable TCP_NODELAY on the replica socket after SYNC?")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# If you select "yes" Redis will use a smaller number of TCP packets and')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# less bandwidth to send data to replicas. But this can add a delay for")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the data to appear on the replica side, up to 40 milliseconds with")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Linux kernels using a default configuration.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# If you select "no" the delay for data to appear on the replica side will')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# be reduced but more bandwidth will be used for replication.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default we optimize for low latency, but in very high traffic conditions")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# or when the master and replicas are many hops away, turning this to "yes" may')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# be a good idea.")]),e._v("\nrepl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("disable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("tcp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("nodelay no\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set the replication backlog size. The backlog is a buffer that accumulates")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replica data when replicas are disconnected for some time, so that when a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replica wants to reconnect again, often a full resync is not needed, but a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# partial resync is enough, just passing the portion of data the replica")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# missed while disconnected.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The bigger the replication backlog, the longer the replica can endure the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# disconnect and later be able to perform a partial resynchronization.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The backlog is only allocated if there is at least one replica connected.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# repl-backlog-size 1mb")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# After a master has no connected replicas for some time, the backlog will be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# freed. The following option configures the amount of seconds that need to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# elapse, starting from the time the last replica disconnected, for the backlog")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# buffer to be freed.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that replicas never free the backlog for timeout, since they may be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# promoted to masters later, and should be able to correctly "partially')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# resynchronize" with other replicas: hence they should always accumulate backlog.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A value of 0 means to never release the backlog.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# repl-backlog-ttl 3600")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The replica priority is an integer number published by Redis in the INFO")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# output. It is used by Redis Sentinel in order to select a replica to promote")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# into a master if the master is no longer working correctly.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A replica with a low priority number is considered better for promotion, so")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for instance if there are three replicas with priority 10, 100, 25 Sentinel")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will pick the one with priority 10, that is the lowest.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# However a special priority of 0 marks the replica as not able to perform the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# role of master, so a replica with priority of 0 will never be selected by")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis Sentinel for promotion.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default the priority is 100.")]),e._v("\nreplica"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("priority 100\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -----------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default, Redis Sentinel includes all replicas in its reports. A replica")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# can be excluded from Redis Sentinel's announcements. An unannounced replica")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will be ignored by the 'sentinel replicas <master>' command and won't be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# exposed to Redis Sentinel's clients.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This option does not change the behavior of replica-priority. Even with")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replica-announced set to 'no', the replica can be promoted to master. To")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# prevent this behavior, set replica-priority to 0.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replica-announced yes")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It is possible for a master to stop accepting writes if there are less than")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# N replicas connected, having a lag less or equal than M seconds.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The N replicas need to be in "online" state.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The lag in seconds, that must be <= the specified value, is calculated from")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the last ping received from the replica, that is usually sent every second.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This option does not GUARANTEE that N replicas will accept the write, but")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will limit the window of exposure for lost writes in case not enough replicas")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# are available, to the specified number of seconds.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For example to require at least 3 replicas with a lag <= 10 seconds use:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# min-replicas-to-write 3")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# min-replicas-max-lag 10")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Setting one or the other to 0 disables the feature.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default min-replicas-to-write is set to 0 (feature disabled) and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# min-replicas-max-lag is set to 10.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A Redis master is able to list the address and port of the attached")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# replicas in different ways. For example the "INFO replication" section')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# offers this information, which is used, among other tools, by")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis Sentinel in order to discover replica instances.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Another place where this info is available is in the output of the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "ROLE" command of a master.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The listed IP address and port normally reported by a replica is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# obtained in the following way:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   IP: The address is auto detected by checking the peer address")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   of the socket used by the replica to connect with the master.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   Port: The port is communicated by the replica during the replication")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   handshake, and is normally the port that the replica is using to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   listen for connections.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# However when port forwarding or Network Address Translation (NAT) is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# used, the replica may actually be reachable via different IP and port")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# pairs. The following two options can be used by a replica in order to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# report to its master a specific set of IP and port, so that both INFO")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and ROLE will report those values.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# There is no need to use both the options if you need to override just")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the port or the IP address.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replica-announce-ip 5.5.5.5")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replica-announce-port 1234")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################### KEYS TRACKING #################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis implements server assisted support for client side caching of values.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This is implemented using an invalidation table that remembers, using")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a radix key indexed by key name, what clients have which keys. In turn")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# this is used in order to send invalidation messages to clients. Please")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# check this page to understand more about the feature:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   https://redis.io/topics/client-side-caching")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When tracking is enabled for a client, all the read only queries are assumed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to be cached: this will force Redis to store information in the invalidation")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# table. When keys are modified, such information is flushed away, and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# invalidation messages are sent to the clients. However if the workload is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# heavily dominated by reads, Redis could use more and more memory in order")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to track the keys fetched by many clients.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For this reason it is possible to configure a maximum fill value for the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# invalidation table. By default it is set to 1M of keys, and once this limit")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# is reached, Redis will start to evict keys in the invalidation table")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# even if they were not modified, just to reclaim memory: this will in turn")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# force the clients to invalidate the cached values. Basically the table")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maximum size is a trade off between the memory you want to spend server")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# side to track information about who cached what, and the ability of clients")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to retain cached objects in memory.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If you set the value to 0, it means there are no limits, and Redis will")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# retain as many keys as needed in the invalidation table.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# In the "stats" INFO section, you can find information about the number of')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# keys in the invalidation table at every given moment.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note: when key tracking is used in broadcasting mode, no memory is used")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in the server side so this setting is useless.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tracking-table-max-keys 1000000")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################## SECURITY ###################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Warning: since Redis is pretty fast, an outside user can try up to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1 million passwords per second against a modern box. This means that you")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# should use very strong passwords, otherwise they will be very easy to break.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that because the password is really a shared secret between the client")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and the server, and should not be memorized by any human, the password")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# can be easily a long string from /dev/urandom or whatever, so by using a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# long and unguessable password no brute force attack will be possible.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis ACL users are defined in the following format:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   user <username> ... acl rules ...")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For example:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   user worker +@list +@connection ~jobs:* on >ffa9203c493aa99")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The special username "default" is used for new connections. If this user')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# has the "nopass" rule, then new connections will be immediately authenticated')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# as the "default" user without the need of any password provided via the')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# AUTH command. Otherwise if the "default" user is not flagged with "nopass"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the connections will start in not authenticated state, and will require")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# AUTH (or the HELLO command AUTH option) in order to be authenticated and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# start to work.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The ACL rules that describe what a user can do are the following:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  on           Enable the user: it is possible to authenticate as this user.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  off          Disable the user: it's no longer possible to authenticate")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               with this user, however the already authenticated connections")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               will still work.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  skip-sanitize-payload    RESTORE dump-payload sanitation is skipped.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  sanitize-payload         RESTORE dump-payload is sanitized (default).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  +<command>   Allow the execution of that command")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  -<command>   Disallow the execution of that command")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  +@<category> Allow the execution of all the commands in such category")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               with valid categories are like @admin, @set, @sortedset, ...")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               and so forth, see the full list in the server.c file where")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               the Redis command table is described and defined.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               The special category @all means all the commands, but currently")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               present in the server, and that will be loaded in the future")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               via modules.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  +<command>|subcommand    Allow a specific subcommand of an otherwise")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                           disabled command. Note that this form is not")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                           allowed as negative like -DEBUG|SEGFAULT, but")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#                           only additive starting with "+".')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  allcommands  Alias for +@all. Note that it implies the ability to execute")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               all the future commands loaded via the modules system.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  nocommands   Alias for -@all.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ~<pattern>   Add a pattern of keys that can be mentioned as part of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               commands. For instance ~* allows all the keys. The pattern")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               is a glob-style pattern like the one of KEYS.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               It is possible to specify multiple patterns.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  allkeys      Alias for ~*")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  resetkeys    Flush the list of allowed keys patterns.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  &<pattern>   Add a glob-style pattern of Pub/Sub channels that can be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               accessed by the user. It is possible to specify multiple channel")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               patterns.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  allchannels  Alias for &*")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  resetchannels            Flush the list of allowed channel patterns.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ><password>  Add this password to the list of valid password for the user.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#               For example >mypass will add "mypass" to the list.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#               This directive clears the "nopass" flag (see later).')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  <<password>  Remove this password from the list of valid passwords.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  nopass       All the set passwords of the user are removed, and the user")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               is flagged as requiring no password: it means that every")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               password will work against this user. If this directive is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               used for the default user, every new connection will be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               immediately authenticated with the default user without")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#               any explicit AUTH command required. Note that the "resetpass"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               directive will clear this condition.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  resetpass    Flush the list of allowed passwords. Moreover removes the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#               "nopass" status. After "resetpass" the user has no associated')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               passwords and there is no way to authenticate without adding")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#               some password (or setting it as "nopass" later).')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  reset        Performs the following actions: resetpass, resetkeys, off,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               -@all. The user returns to the same state it has immediately")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               after its creation.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ACL rules can be specified in any order: for instance you can start with")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# passwords, then flags, or key patterns. However note that the additive")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and subtractive rules will CHANGE MEANING depending on the ordering.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For instance see the following example:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   user alice on +@all -DEBUG ~* >somepassword")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# This will allow "alice" to use all the commands with the exception of the')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# DEBUG command, since +@all added all the commands to the set of the commands")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# alice can use, and later DEBUG was removed. However if we invert the order")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of two ACL rules the result will be different:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   user alice on -DEBUG +@all ~* >somepassword")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Now DEBUG was removed when alice had yet no commands in the set of allowed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# commands, later all the commands are added, so the user will be able to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# execute everything.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Basically ACL rules are processed left-to-right.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For more information about ACL configuration please refer to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the Redis web site at https://redis.io/topics/acl")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ACL LOG")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The ACL Log tracks failed commands and authentication events associated")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# with ACLs. The ACL Log is useful to troubleshoot failed commands blocked")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# by ACLs. The ACL Log is stored in memory. You can reclaim memory with")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ACL LOG RESET. Define the maximum entry length of the ACL Log below.")]),e._v("\nacllog"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("len 128\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Using an external ACL file")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Instead of configuring users here in this file, it is possible to use")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a stand-alone file just listing users. The two methods cannot be mixed:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# if you configure users here and at the same time you activate the external")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ACL file, the server will refuse to start.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The format of the external ACL user file is exactly the same as the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# format that is used inside redis.conf to describe users.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# aclfile /etc/redis/users.acl")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# IMPORTANT NOTE: starting with Redis 6 "requirepass" is just a compatibility')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# layer on top of the new ACL system. The option effect will be just setting")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the password for the default user. Clients will still authenticate using")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# AUTH <password> as usually, or more explicitly with AUTH default <password>")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# if they follow the new protocol: both will work.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The requirepass is not compatable with aclfile option and the ACL LOAD")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# command, these will cause requirepass to be ignored.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# requirepass foobared")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# New users are initialized with restrictive permissions by default, via the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# equivalent of this ACL rule 'off resetkeys -@all'. Starting with Redis 6.2, it")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# is possible to manage access to Pub/Sub channels with ACL rules as well. The")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# default Pub/Sub channels permission if new users is controlled by the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# acl-pubsub-default configuration directive, which accepts one of these values:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# allchannels: grants access to all Pub/Sub channels")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# resetchannels: revokes access to all Pub/Sub channels")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To ensure backward compatibility while upgrading Redis 6.0, acl-pubsub-default")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# defaults to the 'allchannels' permission.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Future compatibility note: it is very likely that in a future version of Redis")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the directive's default of 'allchannels' will be changed to 'resetchannels' in")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# order to provide better out-of-the-box Pub/Sub security. Therefore, it is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# recommended that you explicitly define Pub/Sub permissions for all users")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# rather then rely on implicit default values. Once you've set explicit")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Pub/Sub for all existing users, you should uncomment the following line.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# acl-pubsub-default resetchannels")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Command renaming (DEPRECATED).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# WARNING: avoid using this option if possible. Instead use ACLs to remove")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# commands from the default user, and put them only in some admin user you")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# create for administrative purposes.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It is possible to change the name of dangerous commands in a shared")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# environment. For instance the CONFIG command may be renamed into something")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# hard to guess so that it will still be available for internal-use tools")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# but not available for general clients.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Example:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It is also possible to completely kill a command by renaming it into")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# an empty string:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# rename-command CONFIG ""')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Please note that changing the name of commands that are logged into the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# AOF file or transmitted to replicas may cause problems.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################### CLIENTS ####################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set the max number of connected clients at the same time. By default")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# this limit is set to 10000 clients, however if the Redis server is not")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# able to configure the process file limit to allow for the specified limit")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the max number of allowed clients is set to the current file limit")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# minus 32 (as Redis reserves a few file descriptors for internal uses).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Once the limit is reached Redis will close all the new connections sending")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# an error 'max number of clients reached'.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# IMPORTANT: When Redis Cluster is used, the max number of connections is also")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# shared with the cluster bus: every node in the cluster will use two")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# connections, one incoming and another outgoing. It is important to size the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# limit accordingly in case of very large clusters.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maxclients 10000")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################## MEMORY MANAGEMENT ################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set a memory usage limit to the specified amount of bytes.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When the memory limit is reached Redis will try to remove keys")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# according to the eviction policy selected (see maxmemory-policy).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If Redis can't remove keys according to the policy, or if the policy is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# set to 'noeviction', Redis will start to reply with errors to commands")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# that would use more memory, like SET, LPUSH, and so on, and will continue")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to reply to read-only commands like GET.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This option is usually useful when using Redis as an LRU or LFU cache, or to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# set a hard memory limit for an instance (using the 'noeviction' policy).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# WARNING: If you have replicas attached to an instance with maxmemory on,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the size of the output buffers needed to feed the replicas are subtracted")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# from the used memory count, so that network problems / resyncs will")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# not trigger a loop where keys are evicted, and in turn the output")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# buffer of replicas is full with DELs of keys evicted triggering the deletion")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of more keys, and so forth until the database is completely emptied.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In short... if you have replicas attached it is suggested that you set a lower")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# limit for maxmemory so that there is some free RAM on the system for replica")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# output buffers (but this is not needed if the policy is 'noeviction').")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maxmemory <bytes>")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 4G * 1024M * 1024K* 1024B")]),e._v("\nmaxmemory 4294967296\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# is reached. You can select one from the following behaviors:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# volatile-lru -> Evict using approximated LRU, only keys with an expire set.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# allkeys-lru -> Evict any key using approximated LRU.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# volatile-lfu -> Evict using approximated LFU, only keys with an expire set.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# allkeys-lfu -> Evict any key using approximated LFU.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# volatile-random -> Remove a random key having an expire set.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# allkeys-random -> Remove a random key, any key.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# noeviction -> Don't evict anything, just return an error on write operations.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# LRU means Least Recently Used")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# LFU means Least Frequently Used")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Both LRU, LFU and volatile-ttl are implemented using approximated")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# randomized algorithms.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note: with any of the above policies, when there are no suitable keys for")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# eviction, Redis will return an error on write operations that require")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# more memory. These are usually commands that create new keys, add data or")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# modify existing keys. A few examples are: SET, INCR, HSET, LPUSH, SUNIONSTORE,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SORT (due to the STORE argument), and EXEC (if the transaction includes any")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# command that requires memory).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The default is:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maxmemory-policy noeviction")]),e._v("\nmaxmemory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("policy volatile"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("lru\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# algorithms (in order to save memory), so you can tune it for speed or")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# accuracy. By default Redis will check five keys and pick the one that was")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# used least recently, you can change the sample size using the following")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# configuration directive.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The default of 5 produces good enough results. 10 Approximates very closely")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# true LRU but costs more CPU. 3 is faster but not very accurate.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maxmemory-samples 5")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Eviction processing is designed to function well with the default setting.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If there is an unusually large amount of write traffic, this value may need to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# be increased.  Decreasing this value may reduce latency at the risk of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# eviction processing effectiveness")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   0 = minimum latency, 10 = default, 100 = process without regard to latency")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maxmemory-eviction-tenacity 10")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Starting from Redis 5, by default a replica will ignore its maxmemory setting")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# (unless it is promoted to master after a failover or manually). It means")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# that the eviction of keys will be just handled by the master, sending the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# DEL commands to the replica as keys evict in the master side.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This behavior ensures that masters and replicas stay consistent, and is usually")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# what you want, however if your replica is writable, or you want the replica")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to have a different memory setting, and you are sure all the writes performed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to the replica are idempotent, then you may change this default (but be sure")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to understand what you are doing).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that since the replica by default does not evict, it may end using more")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# memory than the one set via maxmemory (there are certain buffers that may")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# be larger on the replica, or data structures may sometimes take more memory")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and so forth). So make sure you monitor your replicas and make sure they")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# have enough memory to never hit a real out-of-memory condition before the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# master hits the configured maxmemory setting.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replica-ignore-maxmemory yes")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis reclaims expired keys in two ways: upon access when those keys are")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# found to be expired, and also in background, in what is called the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "active expire key". The key space is slowly and interactively scanned')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# looking for expired keys to reclaim, so that it is possible to free memory")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of keys that are expired and will never be accessed again in a short time.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The default effort of the expire cycle will try to avoid having more than")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ten percent of expired keys still in memory, and will try to avoid consuming")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# more than 25% of total memory and to add latency to the system. However")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# it is possible to increase the expire "effort" that is normally set to')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "1", to a greater value, up to the value "10". At its maximum value the')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# system will use more CPU, longer cycles (and technically may introduce")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# more latency), and will tolerate less already expired keys still present")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in the system. It's a tradeoff between memory, CPU and latency.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# active-expire-effort 1")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################# LAZY FREEING ####################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis has two primitives to delete keys. One is called DEL and is a blocking")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# deletion of the object. It means that the server stops processing new commands")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in order to reclaim all the memory associated with an object in a synchronous")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# way. If the key deleted is associated with a small object, the time needed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in order to execute the DEL command is very small and comparable to most other")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# O(1) or O(log_N) commands in Redis. However if the key is associated with an")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# aggregated value containing millions of elements, the server can block for")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a long time (even seconds) in order to complete the operation.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For the above reasons Redis also offers non blocking deletion primitives")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# FLUSHDB commands, in order to reclaim memory in background. Those commands")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# are executed in constant time. Another thread will incrementally free the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# object in the background as fast as possible.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It's up to the design of the application to understand when it is a good")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# idea to use one or the other. However the Redis server sometimes has to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# delete keys or flush the whole database as a side effect of other operations.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Specifically Redis deletes objects independently of a user call in the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# following scenarios:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1) On eviction, because of the maxmemory and maxmemory policy configurations,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    in order to make room for new data, without going over the specified")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    memory limit.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2) Because of expire: when a key with an associated time to live (see the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    EXPIRE command) must be deleted from memory.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3) Because of a side effect of a command that stores data on a key that may")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    already exist. For example the RENAME command may delete the old key")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    content when it is replaced with another one. Similarly SUNIONSTORE")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    or SORT with STORE option may delete existing keys. The SET command")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    itself removes any old content of the specified key in order to replace")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    it with the specified string.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 4) During replication, when a replica performs a full resynchronization with")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    its master, the content of the whole database is removed in order to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    load the RDB file just transferred.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In all the above cases the default is to delete objects in a blocking way,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# like if DEL was called. However you can configure each case specifically")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in order to instead release memory in a non-blocking way like if UNLINK")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# was called, using the following configuration directives.")]),e._v("\n\nlazyfree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("lazy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("eviction no\nlazyfree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("lazy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("expire no\nlazyfree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("lazy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("server"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("del no\nreplica"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("lazy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("flush no\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It is also possible, for the case when to replace the user code DEL calls")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# with UNLINK calls is not easy, to modify the default behavior of the DEL")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# command to act exactly like UNLINK, using the following configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# directive:")]),e._v("\n\nlazyfree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("lazy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("del no\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# FLUSHDB, FLUSHALL, and SCRIPT FLUSH support both asynchronous and synchronous")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# deletion, which can be controlled by passing the [SYNC|ASYNC] flags into the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# commands. When neither flag is passed, this directive will be used to determine")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# if the data should be deleted asynchronously.")]),e._v("\n\nlazyfree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("lazy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("flush no\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################ THREADED I/O #################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis is mostly single threaded, however there are certain threaded")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# operations such as UNLINK, slow I/O accesses and other things that are")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# performed on side threads.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Now it is also possible to handle Redis clients socket reads and writes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in different I/O threads. Since especially writing is so slow, normally")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis users use pipelining in order to speed up the Redis performances per")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# core, and spawn multiple instances in order to scale more. Using I/O")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# threads it is possible to easily speedup two times Redis without resorting")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to pipelining nor sharding of the instance.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default threading is disabled, we suggest enabling it only in machines")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# that have at least 4 or more cores, leaving at least one spare core.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Using more than 8 threads is unlikely to help much. We also recommend using")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# threaded I/O only if you actually have performance problems, with Redis")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# instances being able to use a quite big percentage of CPU time, otherwise")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# there is no point in using this feature.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# So for instance if you have a four cores boxes, try to use 2 or 3 I/O")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# threads, if you have a 8 cores, try to use 6 threads. In order to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# enable I/O threads use the following configuration directive:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\nio"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("threads 4\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Setting io-threads to 1 will just use the main thread as usual.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When I/O threads are enabled, we only use threads for writes, that is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to thread the write(2) syscall and transfer the client buffers to the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# socket. However it is also possible to enable threading of reads and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# protocol parsing using the following configuration directive, by setting")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# it to yes:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\nio"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("threads"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("do"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("reads yes\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Usually threading reads doesn't help much.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# NOTE 1: This configuration directive cannot be changed at runtime via")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CONFIG SET. Aso this feature currently does not work when SSL is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# enabled.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# NOTE 2: If you want to test the Redis speedup using redis-benchmark, make")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# sure you also run the benchmark itself in threaded mode, using the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# --threads option to match the number of Redis threads, otherwise you'll not")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# be able to notice the improvements.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################ KERNEL OOM CONTROL ##############################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On Linux, it is possible to hint the kernel OOM killer on what processes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# should be killed first when out of memory.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enabling this feature makes Redis actively control the oom_score_adj value")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for all its processes, depending on their role. The default scores will")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# attempt to have background child processes killed before all others, and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replicas killed before masters.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis supports three options:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# no:       Don't make changes to oom-score-adj (default).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# yes:      Alias to "relative" see below.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# absolute: Values in oom-score-adj-values are written as is to the kernel.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# relative: Values are used relative to the initial value of oom_score_adj when")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#           the server starts and are then clamped to a range of -1000 to 1000.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#           Because typically the initial value is 0, they will often match the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#           absolute values.")]),e._v("\noom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("adj no\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When oom-score-adj is used, this directive controls the specific values used")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for master, replica and background child processes. Values range -2000 to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2000 (higher means more likely to be killed).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Unprivileged processes (not root, and without CAP_SYS_RESOURCE capabilities)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# can freely increase their value, but not decrease it below its initial")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# settings. This means that setting oom-score-adj to "relative" and setting the')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# oom-score-adj-values to positive values will always succeed.")]),e._v("\noom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("adj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("values 0 200 800\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#################### KERNEL transparent hugepage CONTROL ######################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Usually the kernel Transparent Huge Pages control is set to "madvise" or')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# or "never" by default (/sys/kernel/mm/transparent_hugepage/enabled), in which')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# case this config has no effect. On systems in which it is set to "always",')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# redis will attempt to disable it specifically for the redis process in order")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to avoid latency problems specifically with fork(2) and CoW.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If for some reason you prefer to keep it enabled, you can set this config to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "no" and the kernel global to "always".')]),e._v("\n\ndisable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("thp yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################## APPEND ONLY MODE ###############################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default Redis asynchronously dumps the dataset on disk. This mode is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# good enough in many applications, but an issue with the Redis process or")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a power outage may result into a few minutes of writes lost (depending on")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the configured save points).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The Append Only File is an alternative persistence mode that provides")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# much better durability. For instance using the default data fsync policy")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# (see later in the config file) Redis can lose just one second of writes in a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# dramatic event like a server power outage, or a single write if something")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# wrong with the Redis process itself happens, but the operating system is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# still running correctly.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# AOF and RDB persistence can be enabled at the same time without problems.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If the AOF is enabled on startup Redis will load the AOF, that is the file")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# with the better durability guarantees.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Please check https://redis.io/topics/persistence for more information.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# appendonly yes")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The name of the append only file (default: "appendonly.aof")')]),e._v("\n\nappendfilename appendonly.aof\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The fsync() call tells the Operating System to actually write data on disk")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# instead of waiting for more data in the output buffer. Some OS will really flush")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# data on disk, some other OS will just try to do it ASAP.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis supports three different modes:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# no: don't fsync, just let the OS flush the data when it wants. Faster.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# always: fsync after every write to the append only log. Slow, Safest.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# everysec: fsync only one time every second. Compromise.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The default is "everysec", as that\'s usually the right compromise between')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# speed and data safety. It's up to you to understand if you can relax this to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "no" that will let the operating system flush the output buffer when')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# it wants, for better performances (but if you can live with the idea of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# some data loss consider the default persistence mode that's snapshotting),")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# or on the contrary, use "always" that\'s very slow but a bit safer than')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# everysec.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# More details please check the following article:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# http://antirez.com/post/redis-persistence-demystified.html")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# If unsure, use "everysec".')]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# appendfsync always")]),e._v("\nappendfsync everysec\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# appendfsync no")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When the AOF fsync policy is set to always or everysec, and a background")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# saving process (a background save or AOF log background rewriting) is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# performing a lot of I/O against the disk, in some Linux configurations")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis may block too long on the fsync() call. Note that there is no fix for")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# this currently, as even performing fsync in a different thread will block")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# our synchronous write(2) call.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In order to mitigate this problem it's possible to use the following option")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# that will prevent fsync() from being called in the main process while a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# BGSAVE or BGREWRITEAOF is in progress.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This means that while another child is saving, the durability of Redis is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# the same as "appendfsync none". In practical terms, this means that it is')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# possible to lose up to 30 seconds of log in the worst scenario (with the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# default Linux settings).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# If you have latency problems turn this to "yes". Otherwise leave it as')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "no" that is the safest pick from the point of view of durability.')]),e._v("\n\nno"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("appendfsync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("on"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("rewrite no\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Automatic rewrite of the append only file.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis is able to automatically rewrite the log file implicitly calling")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# BGREWRITEAOF when the AOF log size grows by the specified percentage.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This is how it works: Redis remembers the size of the AOF file after the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# latest rewrite (if no rewrite has happened since the restart, the size of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the AOF at startup is used).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This base size is compared to the current size. If the current size is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bigger than the specified percentage, the rewrite is triggered. Also")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# you need to specify a minimal size for the AOF file to be rewritten, this")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# is useful to avoid rewriting the AOF file even if the percentage increase")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# is reached but it is still pretty small.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Specify a percentage of zero in order to disable the automatic AOF")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# rewrite feature.")]),e._v("\n\nauto"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("aof"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("rewrite"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("percentage 100\nauto"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("aof"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("rewrite"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("min"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("size 64mb\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# An AOF file may be found to be truncated at the end during the Redis")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# startup process, when the AOF data gets loaded back into memory.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This may happen when the system where Redis is running")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# crashes, especially when an ext4 filesystem is mounted without the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# data=ordered option (however this can't happen when Redis itself")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# crashes or aborts but the operating system still works correctly).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis can either exit with an error when this happens, or load as much")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# data as possible (the default now) and start if the AOF file is found")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to be truncated at the end. The following option controls this behavior.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If aof-load-truncated is set to yes, a truncated AOF file is loaded and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the Redis server starts emitting a log to inform the user of the event.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Otherwise if the option is set to no, the server aborts with an error")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and refuses to start. When the option is set to no, the user requires")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# to fix the AOF file using the "redis-check-aof" utility before to restart')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the server.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that if the AOF file will be found to be corrupted in the middle")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the server will still exit with an error. This option only applies when")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis will try to read more data from the AOF file but not enough bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will be found.")]),e._v("\naof"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("load"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("truncated yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When rewriting the AOF file, Redis is able to use an RDB preamble in the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# AOF file for faster rewrites and recoveries. When this option is turned")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# on the rewritten AOF file is composed of two different stanzas:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   [RDB file][AOF tail]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# When loading, Redis recognizes that the AOF file starts with the "REDIS"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# string and loads the prefixed RDB file, then continues loading the AOF")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tail.")]),e._v("\naof"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("use"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("rdb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("preamble yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################ LUA SCRIPTING  ###############################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Max execution time of a Lua script in milliseconds.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If the maximum execution time is reached Redis will log that a script is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# still in execution after the maximum allowed time and will start to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# reply to queries with an error.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When a long running script exceeds the maximum execution time only the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# used to stop a script that did not yet call any write commands. The second")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# is the only way to shut down the server in the case a write command was")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# already issued by the script but the user doesn't want to wait for the natural")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# termination of the script.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set it to 0 or a negative value for unlimited execution without warnings.")]),e._v("\nlua"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("limit 5000\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################ REDIS CLUSTER  ###############################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Normal Redis instances can't be part of a Redis Cluster; only nodes that are")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# started as cluster nodes can. In order to start a Redis instance as a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster node enable the cluster support uncommenting the following:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-enabled yes")]),e._v("\ncluster"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("enabled yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Every cluster node has a cluster configuration file. This file is not")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# intended to be edited by hand. It is created and updated by Redis nodes.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Every Redis Cluster node requires a different cluster configuration file.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Make sure that instances running in the same system do not have")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# overlapping cluster configuration file names.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-config-file nodes-6379.conf")]),e._v("\ncluster"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("config"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("file /data/redis/dc3/master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("01/node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("01/etc/nodes.conf\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Cluster node timeout is the amount of milliseconds a node must be unreachable")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for it to be considered in failure state.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Most other internal time limits are a multiple of the node timeout.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-node-timeout 15000")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A replica of a failing master will avoid to start a failover if its data")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# looks too old.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# There is no simple way for a replica to actually have an exact measure of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# its "data age", so the following two checks are performed:')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1) If there are multiple replicas able to failover, they exchange messages")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    in order to try to give an advantage to the replica with the best")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    replication offset (more data from the master processed).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    Replicas will try to get their rank by offset, and apply to the start")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    of the failover a delay proportional to their rank.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2) Every single replica computes the time of the last interaction with")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    its master. This can be the last ping or command received (if the master")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#    is still in the "connected" state), or the time that elapsed since the')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    disconnection with the master (if the replication link is currently down).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    If the last interaction is too old, the replica will not try to failover")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    at all.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The point "2" can be tuned by user. Specifically a replica will not perform')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the failover if, since the last interaction with the master, the time")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# elapsed is greater than:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   (node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# So for example if node-timeout is 30 seconds, and the cluster-replica-validity-factor")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# is 10, and assuming a default repl-ping-replica-period of 10 seconds, the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replica will not try to failover if it was not able to talk with the master")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for longer than 310 seconds.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A large cluster-replica-validity-factor may allow replicas with too old data to failover")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a master, while a too small value may prevent the cluster from being able to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# elect a replica at all.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For maximum availability, it is possible to set the cluster-replica-validity-factor")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to a value of 0, which means, that replicas will always try to failover the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# master regardless of the last time they interacted with the master.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# (However they'll always try to apply a delay proportional to their")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# offset rank).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Zero is the only value able to guarantee that when all the partitions heal")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the cluster will always be able to continue.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-replica-validity-factor 10")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Cluster replicas are able to migrate to orphaned masters, that are masters")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# that are left without working replicas. This improves the cluster ability")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to resist to failures as otherwise an orphaned master can't be failed over")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in case of failure if it has no working replicas.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Replicas migrate to orphaned masters only if there are still at least a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# given number of other working replicas for their old master. This number")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# is the "migration barrier". A migration barrier of 1 means that a replica')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will migrate only if there is at least 1 other working replica for its master")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and so forth. It usually reflects the number of replicas you want for every")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# master in your cluster.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Default is 1 (replicas migrate only if their masters remain with at least")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# one replica). To disable migration just set it to a very large value or")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# set cluster-allow-replica-migration to 'no'.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A value of 0 can be set but is useful only for debugging and dangerous")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in production.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-migration-barrier 1")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Turning off this option allows to use less automatic cluster configuration.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It both disables migration to orphaned masters and migration from masters")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# that became empty.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Default is 'yes' (allow automatic migrations).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-allow-replica-migration yes")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default Redis Cluster nodes stop accepting queries if they detect there")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# is at least a hash slot uncovered (no available node is serving it).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This way if the cluster is partially down (for example a range of hash slots")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# are no longer covered) all the cluster becomes, eventually, unavailable.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It automatically returns available as soon as all the slots are covered again.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# However sometimes you want the subset of the cluster which is working,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to continue to accept queries for the part of the key space that is still")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# covered. In order to do so, just set the cluster-require-full-coverage")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# option to no.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-require-full-coverage yes")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This option, when set to yes, prevents replicas from trying to failover its")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# master during master failures. However the replica can still perform a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# manual failover, if forced to do so.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This is useful in different scenarios, especially in the case of multiple")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# data center operations, where we want one side to never be promoted if not")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in the case of a total DC failure.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-replica-no-failover no")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This option, when set to yes, allows nodes to serve read traffic while the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the cluster is in a down state, as long as it believes it owns the slots. ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This is useful for two cases.  The first case is for when an application ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# doesn't require consistency of data during node failures or network partitions.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# One example of this is a cache, where as long as the node has the data it")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# should be able to serve it. ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The second use case is for configurations that don't meet the recommended  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# three shards but want to enable cluster mode and scale later. A ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# master outage in a 1 or 2 shard configuration causes a read/write outage to the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# entire cluster without this option set, with it set there is only a write outage.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Without a quorum of masters, slot ownership will not change automatically. ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-allow-reads-when-down no")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In order to setup your cluster make sure to read the documentation")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# available at https://redis.io web site.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("########################## CLUSTER DOCKER/NAT support  ########################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In certain deployments, Redis Cluster nodes address discovery fails, because")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# addresses are NAT-ted or because ports are forwarded (the typical case is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Docker and other containers).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In order to make Redis Cluster working in such environments, a static")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# configuration where each node knows its public address is needed. The")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# following four options are used for this scope, and are:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# * cluster-announce-ip")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# * cluster-announce-port")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# * cluster-announce-tls-port")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# * cluster-announce-bus-port")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Each instructs the node about its address, client ports (for connections")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# without and with TLS) and cluster message bus port. The information is then")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# published in the header of the bus packets so that other nodes will be able to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# correctly map the address of the node publishing the information.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If cluster-tls is set to yes and cluster-announce-tls-port is omitted or set")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to zero, then cluster-announce-port refers to the TLS port. Note also that")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-announce-tls-port has no effect if cluster-tls is set to no.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If the above options are not used, the normal Redis Cluster auto-detection")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will be used instead.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that when remapped, the bus port may not be at the fixed offset of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# clients port + 10000, so you can specify any port and bus-port depending")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# on how they get remapped. If the bus-port is not set, a fixed offset of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 10000 will be used as usual.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Example:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-announce-ip 10.1.1.5")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-announce-tls-port 6379")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-announce-port 0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cluster-announce-bus-port 6380")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################## SLOW LOG ###################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The Redis Slow Log is a system to log queries that exceeded a specified")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# execution time. The execution time does not include the I/O operations")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# like talking with the client, sending the reply and so forth,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# but just the time needed to actually execute the command (this is the only")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# stage of command execution where the thread is blocked and can not serve")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# other requests in the meantime).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# You can configure the slow log with two parameters: one tells Redis")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# what is the execution time, in microseconds, to exceed in order for the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# command to get logged, and the other parameter is the length of the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# slow log. When a new command is logged the oldest one is removed from the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# queue of logged commands.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The following time is expressed in microseconds, so 1000000 is equivalent")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to one second. Note that a negative number disables the slow log, while")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a value of zero forces the logging of every command.")]),e._v("\nslowlog"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("slower"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("than 10000\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# There is no limit to this length. Just be aware that it will consume memory.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# You can reclaim memory used by the slow log with SLOWLOG RESET.")]),e._v("\nslowlog"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("len 128\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################ LATENCY MONITOR ##############################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The Redis latency monitoring subsystem samples different operations")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# at runtime in order to collect data related to possible sources of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# latency of a Redis instance.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Via the LATENCY command this information is available to the user that can")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# print graphs and obtain reports.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The system only logs operations that were performed in a time equal or")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# greater than the amount of milliseconds specified via the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# latency-monitor-threshold configuration directive. When its value is set")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to zero, the latency monitor is turned off.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default latency monitoring is disabled since it is mostly not needed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# if you don't have latency issues, and collecting data has a performance")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# impact, that while very small, can be measured under big load. Latency")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# monitoring can easily be enabled at runtime using the command")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "CONFIG SET latency-monitor-threshold <milliseconds>" if needed.')]),e._v("\nlatency"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("monitor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("threshold 0\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################# EVENT NOTIFICATION ##############################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis can notify Pub/Sub clients about events happening in the key space.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This feature is documented at https://redis.io/topics/notifications")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For instance if keyspace events notification is enabled, and a client")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# performs a DEL operation on key "foo" stored in the Database 0, two')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# messages will be published via Pub/Sub:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# PUBLISH __keyspace@0__:foo del")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# PUBLISH __keyevent@0__:del foo")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It is possible to select the events that Redis will notify among a set")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of classes. Every class is identified by a single character:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  K     Keyspace events, published with __keyspace@<db>__ prefix.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  E     Keyevent events, published with __keyevent@<db>__ prefix.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  $     String commands")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  l     List commands")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  s     Set commands")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  h     Hash commands")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  z     Sorted set commands")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  x     Expired events (events generated every time a key expires)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  e     Evicted events (events generated when a key is evicted for maxmemory)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  t     Stream commands")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  d     Module key type events")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  m     Key-miss events (Note: It is not included in the 'A' class)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#  A     Alias for g$lshzxetd, so that the "AKE" string means all the events')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#        (Except key-miss events which are excluded from 'A' due to their")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#         unique nature).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#  The "notify-keyspace-events" takes as argument a string that is composed')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  of zero or multiple characters. The empty string means that notifications")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  are disabled.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Example: to enable list and generic events, from the point of view of the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#           event name, use:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  notify-keyspace-events Elg")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Example 2: to get the stream of the expired keys subscribing to channel")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#             name __keyevent@0__:expired use:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  notify-keyspace-events Ex")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  By default all notifications are disabled because most users don't need")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  this feature and the feature has some overhead. Note that if you don't")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  specify at least one of K or E, no events will be delivered.")]),e._v("\nnotify"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("keyspace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v('events ""\n\n'),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################### GOPHER SERVER #################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis contains an implementation of the Gopher protocol, as specified in")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the RFC 1436 (https://www.ietf.org/rfc/rfc1436.txt).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The Gopher protocol was very popular in the late '90s. It is an alternative")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to the web, and the implementation both server and client side is so simple")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# that the Redis server has just 100 lines of code in order to implement this")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# support.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# What do you do with Gopher nowadays? Well Gopher never *really* died, and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# lately there is a movement in order for the Gopher more hierarchical content")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# composed of just plain text documents to be resurrected. Some want a simpler")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# internet, others believe that the mainstream internet became too much")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# controlled, and it's cool to create an alternative space for people that")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# want a bit of fresh air.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Anyway for the 10nth birthday of the Redis, we gave it the Gopher protocol")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# as a gift.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# --- HOW IT WORKS? ---")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The Redis Gopher support uses the inline protocol of Redis, and specifically")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# two kind of inline requests that were anyway illegal: an empty request")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# or any request that starts with "/" (there are no Redis commands starting')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# with such a slash). Normal RESP2/RESP3 requests are completely out of the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# path of the Gopher protocol implementation and are served as usual as well.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If you open a connection to Redis when Gopher is enabled and send it")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# a string like "/foo", if there is a key named "/foo" it is served via the')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Gopher protocol.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# In order to create a real Gopher "hole" (the name of a Gopher site in Gopher')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# talking), you likely need a script like the following:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   https://github.com/antirez/gopher2redis")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# --- SECURITY WARNING ---")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If you plan to put Redis on the internet in a publicly accessible address")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to server Gopher pages MAKE SURE TO SET A PASSWORD to the instance.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Once a password is set:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   1. The Gopher server (when enabled, not by default) will still serve")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      content via Gopher.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   2. However other commands cannot be called before the client will")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      authenticate.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# So use the 'requirepass' option to protect your instance.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that Gopher is not currently supported when 'io-threads-do-reads'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# is enabled.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To enable Gopher support, uncomment the following line and set the option")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# from no (the default) to yes.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# gopher-enabled no")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################### ADVANCED CONFIG ###############################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Hashes are encoded using a memory efficient data structure when they have a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# small number of entries, and the biggest entry does not exceed a given")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# threshold. These thresholds can be configured using the following directives.")]),e._v("\nhash"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("ziplist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("entries 512\nhash"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("ziplist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("value 64\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Lists are also encoded in a special way to save a lot of space.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The number of entries allowed per internal list node can be specified")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# as a fixed maximum size or a maximum number of elements.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For a fixed maximum size, use -5 through -1, meaning:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -5: max size: 64 Kb  <-- not recommended for normal workloads")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -4: max size: 32 Kb  <-- not recommended")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -3: max size: 16 Kb  <-- probably not recommended")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -2: max size: 8 Kb   <-- good")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -1: max size: 4 Kb   <-- good")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Positive numbers mean store up to _exactly_ that number of elements")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# per list node.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# but if your use case is unique, adjust the settings as necessary.")]),e._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("ziplist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("size "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Lists may also be compressed.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Compress depth is the number of quicklist ziplist nodes from *each* side of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the list to *exclude* from compression.  The head and tail of the list")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# are always uncompressed for fast push/pop operations.  Settings are:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 0: disable all list compression")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1: depth 1 means \"don't start compressing until after 1 node into the list,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#    going from either the head or tail"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    So: [head]->node->node->...->node->[tail]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    [head], [tail] will always be uncompressed; inner nodes will compress.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2: [head]->[next]->node->node->...->node->[prev]->[tail]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    2 here means: don't compress head or head->next or tail->prev or tail,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    but compress all nodes between them.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# etc.")]),e._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("compress"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("depth 0\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Sets have a special encoding in just one case: when a set is composed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of just strings that happen to be integers in radix 10 in the range")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of 64 bit signed integers.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The following configuration setting sets the limit in the size of the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# set in order to use this special memory saving encoding.")]),e._v("\nset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("intset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("entries 512\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Similarly to hashes and lists, sorted sets are also specially encoded in")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# order to save a lot of space. This encoding is only used when the length and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# elements of a sorted set are below the following limits:")]),e._v("\nzset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("ziplist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("entries 128\nzset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("ziplist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("value 64\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# HyperLogLog sparse representation bytes limit. The limit includes the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 16 bytes header. When an HyperLogLog using the sparse representation crosses")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# this limit, it is converted into the dense representation.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A value greater than 16000 is totally useless, since at that point the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# dense representation is more memory efficient.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The suggested value is ~ 3000 in order to have the benefits of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the space efficient encoding without slowing down too much PFADD,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# which is O(N) with the sparse encoding. The value can be raised to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ~ 10000 when CPU is not a concern, but space is, and the data set is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.")]),e._v("\nhll"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("sparse"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("bytes 3000\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Streams macro node max size / items. The stream data structure is a radix")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tree of big nodes that encode multiple items inside. Using this configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# it is possible to configure how big a single node can be in bytes, and the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maximum number of items it may contain before switching to a new node when")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# appending new stream entries. If any of the following settings are set to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# zero, the limit is ignored, so for instance it is possible to set just a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# max entries limit by setting max-bytes to 0 and max-entries to the desired")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# value.")]),e._v("\nstream"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("bytes 4096\nstream"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("entries 100\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# order to help rehashing the main Redis hash table (the one mapping top-level")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# keys to values). The hash table implementation Redis uses (see dict.c)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# performs a lazy rehashing: the more operation you run into a hash table")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# that is rehashing, the more rehashing "steps" are performed, so if the')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# server is idle the rehashing is never complete and some more memory is used")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# by the hash table.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The default is to use this millisecond 10 times every second in order to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# actively rehash the main dictionaries, freeing memory when possible.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If unsure:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# use "activerehashing no" if you have hard latency requirements and it is')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# not a good thing in your environment that Redis can reply from time to time")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to queries with 2 milliseconds delay.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# use "activerehashing yes" if you don\'t have such hard requirements but')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# want to free memory asap when possible.")]),e._v("\nactiverehashing yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The client output buffer limits can be used to force disconnection of clients")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# that are not reading data from the server fast enough for some reason (a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# common reason is that a Pub/Sub client can't consume messages as fast as the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# publisher can produce them).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The limit can be set differently for the three different classes of clients:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# normal -> normal clients including MONITOR clients")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# replica  -> replica clients")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# pubsub -> clients subscribed to at least one pubsub channel or pattern")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The syntax of every client-output-buffer-limit directive is the following:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A client is immediately disconnected once the hard limit is reached, or if")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the soft limit is reached and remains reached for the specified number of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# seconds (continuously).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# So for instance if the hard limit is 32 megabytes and the soft limit is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 16 megabytes / 10 seconds, the client will get disconnected immediately")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# if the size of the output buffers reach 32 megabytes, but will also get")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# disconnected if the client reaches 16 megabytes and continuously overcomes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the limit for 10 seconds.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default normal clients are not limited because they don't receive data")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# without asking (in a push way), but just after a request, so only")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# asynchronous clients may create a scenario where data is requested faster")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# than it can read.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Instead there is a default limit for pubsub and replica clients, since")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# subscribers and replicas receive data in a push fashion.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Both the hard or the soft limit can be disabled by setting them to zero.")]),e._v("\nclient"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("output"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("buffer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("limit normal 0 0 0\nclient"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("output"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("buffer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("limit replica 256mb 64mb 60\nclient"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("output"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("buffer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("limit pubsub 32mb 8mb 60\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Client query buffers accumulate new commands. They are limited to a fixed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# amount by default in order to avoid that a protocol desynchronization (for")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# instance due to a bug in the client) will lead to unbound memory usage in")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the query buffer. However you can configure it here if you have very special")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# needs, such us huge multi/exec requests or alike.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# client-query-buffer-limit 1gb")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In the Redis protocol, bulk requests, that are, elements representing single")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# strings, are normally limited to 512 mb. However you can change this limit")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# here, but must be 1mb or greater")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# proto-max-bulk-len 512mb")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis calls an internal function to perform many background tasks, like")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# closing connections of clients in timeout, purging expired keys that are")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# never requested, and so forth.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Not all tasks are performed with the same frequency, but Redis checks for")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# tasks to perform according to the specified "hz" value.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# By default "hz" is set to 10. Raising the value will use more CPU when')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis is idle, but at the same time will make Redis more responsive when")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# there are many keys expiring at the same time, and timeouts may be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# handled with more precision.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The range is between 1 and 500, however a value over 100 is usually not")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a good idea. Most users should use the default of 10 and raise this up to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 100 only in environments where very low latency is required.")]),e._v("\nhz 10\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Normally it is useful to have an HZ value which is proportional to the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# number of clients connected. This is useful in order, for instance, to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# avoid too many clients are processed for each background task invocation")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in order to avoid latency spikes.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Since the default HZ value by default is conservatively set to 10, Redis")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# offers, and enables by default, the ability to use an adaptive HZ value")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# which will temporarily raise when there are many connected clients.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When dynamic HZ is enabled, the actual configured HZ will be used")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# as a baseline, but multiples of the configured HZ value will be actually")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# used as needed once more clients are connected. In this way an idle")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# instance will use very little CPU time while a busy instance will be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# more responsive.")]),e._v("\ndynamic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("hz yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When a child rewrites the AOF file, if the following option is enabled")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the file will be fsync-ed every 32 MB of data generated. This is useful")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in order to commit the file to the disk more incrementally and avoid")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# big latency spikes.")]),e._v("\naof"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("rewrite"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("incremental"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("fsync yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When redis saves RDB file, if the following option is enabled")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the file will be fsync-ed every 32 MB of data generated. This is useful")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in order to commit the file to the disk more incrementally and avoid")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# big latency spikes.")]),e._v("\nrdb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("save"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("incremental"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("fsync yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# idea to start with the default settings and only change them after investigating")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# how to improve the performances and how the keys LFU change over time, which")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# is possible to inspect via the OBJECT FREQ command.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# There are two tunable parameters in the Redis LFU implementation: the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# counter logarithm factor and the counter decay time. It is important to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# understand what the two parameters mean before changing them.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# uses a probabilistic increment with logarithmic behavior. Given the value")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of the old counter, when a key is accessed, the counter is incremented in")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# this way:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1. A random number R between 0 and 1 is extracted.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3. The counter is incremented only if R < P.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The default lfu-log-factor is 10. This is a table of how the frequency")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# counter changes with a different number of accesses with different")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# logarithmic factors:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# +--------+------------+------------+------------+------------+------------+")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# +--------+------------+------------+------------+------------+------------+")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# | 0      | 104        | 255        | 255        | 255        | 255        |")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# +--------+------------+------------+------------+------------+------------+")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# | 1      | 18         | 49         | 255        | 255        | 255        |")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# +--------+------------+------------+------------+------------+------------+")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# | 10     | 10         | 18         | 142        | 255        | 255        |")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# +--------+------------+------------+------------+------------+------------+")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# | 100    | 8          | 11         | 49         | 143        | 255        |")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# +--------+------------+------------+------------+------------+------------+")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# NOTE: The above table was obtained by running the following commands:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   redis-benchmark -n 1000000 incr foo")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   redis-cli object freq foo")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# NOTE 2: The counter initial value is 5 in order to give new objects a chance")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to accumulate hits.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The counter decay time is the time, in minutes, that must elapse in order")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for the key counter to be divided by two (or decremented if it has a value")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# less <= 10).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The default value for the lfu-decay-time is 1. A special value of 0 means to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# decay the counter every time it happens to be scanned.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# lfu-log-factor 10")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# lfu-decay-time 1")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("########################### ACTIVE DEFRAGMENTATION #######################")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# What is active defragmentation?")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Active (online) defragmentation allows a Redis server to compact the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# spaces left between small allocations and deallocations of data in memory,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# thus allowing to reclaim back memory.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Fragmentation is a natural process that happens with every allocator (but")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# less so with Jemalloc, fortunately) and certain workloads. Normally a server")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# restart is needed in order to lower the fragmentation, or at least to flush")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# away all the data and create it again. However thanks to this feature")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# implemented by Oran Agra for Redis 4.0 this process can happen at runtime")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# in a "hot" way, while the server is running.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Basically when the fragmentation is over a certain level (see the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# configuration options below) Redis will start to create new copies of the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# values in contiguous memory regions by exploiting certain specific Jemalloc")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# features (in order to understand if an allocation is causing fragmentation")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and to allocate it in a better place), and at the same time, will release the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# old copies of the data. This process, repeated incrementally for all the keys")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will cause the fragmentation to drop back to normal values.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Important things to understand:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1. This feature is disabled by default, and only works if you compiled Redis")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    to use the copy of Jemalloc we ship with the source code of Redis.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    This is the default with Linux builds.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2. You never need to enable this feature if you don't have fragmentation")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    issues.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3. Once you experience fragmentation, you can enable this feature when")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#    needed with the command "CONFIG SET activedefrag yes".')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The configuration parameters are able to fine tune the behavior of the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# defragmentation process. If you are not sure about what they mean it is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a good idea to leave the defaults untouched.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enabled active defragmentation")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# activedefrag no")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Minimum amount of fragmentation waste to start active defrag")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# active-defrag-ignore-bytes 100mb")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Minimum percentage of fragmentation to start active defrag")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# active-defrag-threshold-lower 10")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Maximum percentage of fragmentation at which we use maximum effort")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# active-defrag-threshold-upper 100")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Minimal effort for defrag in CPU percentage, to be used when the lower")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# threshold is reached")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# active-defrag-cycle-min 1")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Maximal effort for defrag in CPU percentage, to be used when the upper")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# threshold is reached")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# active-defrag-cycle-max 25")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Maximum number of set/hash/zset/list fields that will be processed from")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the main dictionary scan")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# active-defrag-max-scan-fields 1000")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Jemalloc background thread for purging will be enabled by default")]),e._v("\njemalloc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("bg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("thread yes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It is possible to pin different threads and processes of Redis to specific")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CPUs in your system, in order to maximize the performances of the server.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This is useful both in order to pin different Redis threads in different")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CPUs, but also in order to make sure that multiple Redis instances running")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in the same host will be pinned to different CPUs.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Normally you can do this using the "taskset" command, however it is also')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# possible to this via Redis configuration directly, both in Linux and FreeBSD.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# You can pin the server/IO threads, bio threads, aof rewrite child process, and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the bgsave child process. The syntax to specify the cpu list is the same as")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the taskset command:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set redis server/io threads to cpu affinity 0,2,4,6:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# server_cpulist 0-7:2")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set bio threads to cpu affinity 1,3:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bio_cpulist 1,3")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set aof rewrite child process to cpu affinity 8,9,10,11:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# aof_rewrite_cpulist 8-11")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set bgsave child process to cpu affinity 1,10,11")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bgsave_cpulist 1,10-11")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In some cases redis will emit warnings and even refuse to start if it detects")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# that the system is in bad state, it is possible to suppress these warnings")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# by setting the following config which takes a space delimited list of warnings")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to suppress")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ignore-warnings ARM64-COW-BUG")]),e._v("\n")])])]),t("h4",{attrs:{id:"_4-3-启动"}},[e._v("4.3 启动 "),t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-启动"}},[e._v("#")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("/usr/local/redis/src/redis-server /data/redis/dc3/master-01/node-01/etc/redis.conf\n\n/usr/local/redis/src/redis-server /data/redis/dc3/master-01/node-02/etc/redis.conf\n\n/usr/local/redis/src/redis-server /data/redis/dc3/master-02/node-01/etc/redis.conf\n\n/usr/local/redis/src/redis-server /data/redis/dc3/master-02/node-02/etc/redis.conf\n\n/usr/local/redis/src/redis-server /data/redis/dc3/master-03/node-01/etc/redis.conf\n\n/usr/local/redis/src/redis-server /data/redis/dc3/master-03/node-02/etc/redis.conf\n")])])]),t("h4",{attrs:{id:"_4-4-节点配置"}},[e._v("4.4 节点配置 "),t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-节点配置"}},[e._v("#")])]),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("节点握手")])])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 登录到任意节点")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -c 选项指定以Cluster模式运行redis-cli")]),e._v("\n/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6100")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-c")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 握手")]),e._v("\ncluster meet "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6101")]),e._v("\ncluster meet "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6200")]),e._v("\ncluster meet "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6201")]),e._v("\ncluster meet "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6300")]),e._v("\ncluster meet "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6301")]),e._v("\n")])])]),t("blockquote",[t("p",[t("strong",[e._v("节点状态")])]),e._v(" "),t("p",[e._v("每个节点启动后，节点间是相互独立的，他们都处于一个只包含自己的集群当中，以端口号 "),t("code",[e._v("master-01/node-01")]),e._v(" 节点的服务器为例，利用 "),t("code",[e._v("CLUSTER NODES")]),e._v(" 查看当前集群包含的节点。")]),e._v(" "),t("p",[t("code",[e._v("<id> <ip:port@cport> <flags> <master> <ping-sent> <pong-recv> <config-epoch> <link-state> <slot> <slot> ... <slot>")])]),e._v(" "),t("ul",[t("li",[e._v("节点"),t("code",[e._v("id")]),e._v(": 由"),t("code",[e._v("40")]),e._v("个"),t("code",[e._v("16")]),e._v("进制字符串组成，节点id只在集群初始化时创建一次，然后保存到集群配置文件（即前文提到的"),t("code",[e._v("cluster-config-file")]),e._v("）中，以后节点重新启动时会直接在集群配置文件中读取。")]),e._v(" "),t("li",[t("code",[e._v("port@cport")]),e._v(": 前者为普通端口，用于为客户端提供服务；后者为集群端口，分配方法为：普通端口"),t("code",[e._v("+10000")]),e._v("，只用于节点间的通讯。")])])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 登录到任意节点")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -c 选项指定以Cluster模式运行redis-cli")]),e._v("\n/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6100")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-c")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看节点的状态")]),e._v("\ncluster nodes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 输出")]),e._v("\nc5f306ea99017b59e1621e51875f81fdbf928fe7 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6300@16300 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1638944695507")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" connected\n0472e59e5dde1deb38418c5fc49b24240c87c69b "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6201@16201 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1638944694000")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" connected\na22940cd650ecbf823293f08836c8375199f7d1e "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6100@16100 myself,master - "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1638944694000")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" connected\n6a75b47aa9c5e3b6bebe87a3184cb5285abe3755 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6101@16101 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1638944695000")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" connected\ndea417a8d19eccb12194e8aee5a4c77e861bdeb4 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6301@16301 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1638944694000")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" connected\nc348f29d5aa3ac65593ed97fccabd36e7677ae41 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6200@16200 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1638944695000")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" connected\n")])])]),t("blockquote",[t("p",[t("strong",[e._v("指派节点槽")])]),e._v(" "),t("p",[t("code",[e._v("Redis")]),e._v(" 集群通过分片（"),t("code",[e._v("sharding")]),e._v("）的方式保存数据库的键值对，整个数据库被分为 "),t("code",[e._v("16384")]),e._v(" 个槽（"),t("code",[e._v("slot")]),e._v("），数据库每个键都属于这 "),t("code",[e._v("16384")]),e._v(" 个槽的一个，集群中的每个节点都可以处理 "),t("code",[e._v("0")]),e._v(" 个或者最多 "),t("code",[e._v("16384")]),e._v(" 个 "),t("code",[e._v("slot")]),e._v("。")]),e._v(" "),t("p",[e._v("槽是数据管理和迁移的基本单位。当数据库中的 "),t("code",[e._v("16384")]),e._v(" 个槽都分配了节点时，集群处于上线状态（"),t("code",[e._v("ok")]),e._v("）；如果有任意一个槽没有分配节点，则集群处于下线状态（"),t("code",[e._v("fail")]),e._v("）。")]),e._v(" "),t("p",[e._v("注意，只有主节点有处理槽的能力，如果将槽指派步骤放在主从复制之后，并且将槽位分配给从节点，那么集群将无法正常工作（处于下线状态）。")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6100")]),e._v(" cluster addslots "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6200")]),e._v(" cluster addslots "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5001")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6300")]),e._v(" cluster addslots "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10001")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16383")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看节点的状态")]),e._v("\ncluster nodes\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 输出")]),e._v("\nc5f306ea99017b59e1621e51875f81fdbf928fe7 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6300@16300 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1638945113031")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" connected "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10001")]),e._v("-16383\n0472e59e5dde1deb38418c5fc49b24240c87c69b "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6201@16201 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1638945112000")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" connected\na22940cd650ecbf823293f08836c8375199f7d1e "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6100@16100 myself,master - "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1638945111000")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" connected "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("-5000\n6a75b47aa9c5e3b6bebe87a3184cb5285abe3755 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6101@16101 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1638945111024")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" connected\ndea417a8d19eccb12194e8aee5a4c77e861bdeb4 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6301@16301 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1638945111000")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" connected\nc348f29d5aa3ac65593ed97fccabd36e7677ae41 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6200@16200 master - "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1638945112027")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" connected "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5001")]),e._v("-10000\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看集群的信息")]),e._v("\ncluster info\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 输出")]),e._v("\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:5\ncluster_my_epoch:2\ncluster_stats_messages_ping_sent:467\ncluster_stats_messages_pong_sent:466\ncluster_stats_messages_meet_sent:5\ncluster_stats_messages_sent:938\ncluster_stats_messages_ping_received:466\ncluster_stats_messages_pong_received:472\ncluster_stats_messages_received:938\n")])])]),t("blockquote",[t("p",[t("strong",[e._v("高可用 - 主从复制配置")])]),e._v(" "),t("p",[t("code",[e._v("CLUSTER REPLICATE <node_id>")]),e._v(" 用来让集群中接收命令的节点成为 "),t("code",[e._v("node_id")]),e._v(" 所指定节点的从节点，并开始对主节点进行复制。")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6101")]),e._v(" cluster replicate a22940cd650ecbf823293f08836c8375199f7d1e\n\n/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6201")]),e._v(" cluster replicate c348f29d5aa3ac65593ed97fccabd36e7677ae41\n\n/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6301")]),e._v(" cluster replicate c5f306ea99017b59e1621e51875f81fdbf928fe7\n")])])]),t("h3",{attrs:{id:"_5-集群伸缩"}},[e._v("5. 集群伸缩 "),t("a",{staticClass:"header-anchor",attrs:{href:"#_5-集群伸缩"}},[e._v("#")])]),e._v(" "),t("h4",{attrs:{id:"_5-1-添加节点"}},[e._v("5.1 添加节点 "),t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-添加节点"}},[e._v("#")])]),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("启动节点")])])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("/usr/local/redis/src/redis-server /data/redis/dc3/master-04/node-01/etc/redis.conf\n\n/usr/local/redis/src/redis-server /data/redis/dc3/master-04/node-02/etc/redis.conf\n")])])]),t("blockquote",[t("p",[t("strong",[e._v("添加节点")])])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--cluster")]),e._v(" add-node "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6400 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6100\n\n/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--cluster")]),e._v(" add-node "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6401 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6100\n")])])]),t("blockquote",[t("p",[t("strong",[e._v("移动节点槽")])]),e._v(" "),t("p",[e._v("16383 / 4 = 4096")]),e._v(" "),t("ul",[t("li",[e._v("移动的槽位数：最终平均每个主节点有 "),t("code",[e._v("4096")]),e._v(" 个 "),t("code",[e._v("slot")]),e._v(" ，因此总共移动 "),t("code",[e._v("4096 slots")])]),e._v(" "),t("li",[e._v("接收槽位的目标节点 "),t("code",[e._v("ID")]),e._v("：节点 "),t("code",[e._v("6400")]),e._v(" 的 "),t("code",[e._v("ID")])]),e._v(" "),t("li",[e._v("移出槽位的源节点 "),t("code",[e._v("ID")]),e._v("：节点 "),t("code",[e._v("6100")]),e._v("、"),t("code",[e._v("6200")]),e._v("、"),t("code",[e._v("6300")]),e._v(" 的 "),t("code",[e._v("ID")])])])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--cluster")]),e._v(" reshard "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6100")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 输出")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" Performing Cluster Check "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("using "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("node")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6100"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nM: a22940cd650ecbf823293f08836c8375199f7d1e "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6100\n   slots:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("-5000"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5001")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" master\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" additional replica"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nM: c5f306ea99017b59e1621e51875f81fdbf928fe7 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6300\n   slots:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10001")]),e._v("-16383"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6383")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" master\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" additional replica"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nS: 0472e59e5dde1deb38418c5fc49b24240c87c69b "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6201\n   slots: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" slave\n   replicates c348f29d5aa3ac65593ed97fccabd36e7677ae41\nS: 6a75b47aa9c5e3b6bebe87a3184cb5285abe3755 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6101\n   slots: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" slave\n   replicates a22940cd650ecbf823293f08836c8375199f7d1e\nM: ef7b5e0771fe4a1846ee3da4afc5192c96a2af3d "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6401\n   slots: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" master\nS: dea417a8d19eccb12194e8aee5a4c77e861bdeb4 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6301\n   slots: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" slave\n   replicates c5f306ea99017b59e1621e51875f81fdbf928fe7\nM: cf52da2233fc7c0dc406f2f871e59afcdc31b121 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6400\n   slots: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" master\nM: c348f29d5aa3ac65593ed97fccabd36e7677ae41 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6200\n   slots:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5001")]),e._v("-10000"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5000")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" master\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" additional replica"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" All nodes agree about slots configuration.\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" Check "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("open")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" Check slots coverage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" All "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16384")]),e._v(" slots covered.\nHow many slots "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("do")]),e._v(" you want to move "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("from "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" to "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16384")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("? "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4096")]),e._v("\nWhat is the receiving "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("node")]),e._v(" ID? cf52da2233fc7c0dc406f2f871e59afcdc31b121\nPlease enter all the "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("node")]),e._v(" IDs.\n  Type "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'all'")]),e._v(" to use all the nodes as "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" nodes "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" the "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("hash")]),e._v(" slots.\n  Type "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'done'")]),e._v(" once you entered all the "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" nodes IDs.\nSource "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("node")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#1: all")]),e._v("\n")])])]),t("blockquote",[t("p",[t("strong",[e._v("高可用 - 主从复制配置")])])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6401")]),e._v(" cluster replicate cf52da2233fc7c0dc406f2f871e59afcdc31b121\n")])])]),t("h4",{attrs:{id:"_5-2-删除节点"}},[e._v("5.2 删除节点 "),t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-删除节点"}},[e._v("#")])]),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("移动节点槽")])])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--cluster")]),e._v(" reshard "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6400")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 输出")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" Performing Cluster Check "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("using "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("node")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6400"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nM: cf52da2233fc7c0dc406f2f871e59afcdc31b121 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6400\n   slots:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("-1249"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(","),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5001")]),e._v("-6250"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(","),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10001")]),e._v("-11596"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4096")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" master\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" additional replica"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nS: dea417a8d19eccb12194e8aee5a4c77e861bdeb4 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6301\n   slots: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" slave\n   replicates c5f306ea99017b59e1621e51875f81fdbf928fe7\nS: ef7b5e0771fe4a1846ee3da4afc5192c96a2af3d "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6401\n   slots: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" slave\n   replicates cf52da2233fc7c0dc406f2f871e59afcdc31b121\nM: a22940cd650ecbf823293f08836c8375199f7d1e "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6100\n   slots:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1250")]),e._v("-5000"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3751")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" master\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" additional replica"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nS: 6a75b47aa9c5e3b6bebe87a3184cb5285abe3755 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6101\n   slots: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" slave\n   replicates a22940cd650ecbf823293f08836c8375199f7d1e\nM: c348f29d5aa3ac65593ed97fccabd36e7677ae41 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6200\n   slots:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6251")]),e._v("-10000"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3750")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" master\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" additional replica"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nS: 0472e59e5dde1deb38418c5fc49b24240c87c69b "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6201\n   slots: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" slave\n   replicates c348f29d5aa3ac65593ed97fccabd36e7677ae41\nM: c5f306ea99017b59e1621e51875f81fdbf928fe7 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6300\n   slots:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("11597")]),e._v("-16383"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4787")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" master\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" additional replica"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" All nodes agree about slots configuration.\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" Check "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("open")]),e._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" Check slots coverage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" All "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16384")]),e._v(" slots covered.\nHow many slots "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("do")]),e._v(" you want to move "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("from "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" to "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16384")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("? "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4096")]),e._v("\nWhat is the receiving "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("node")]),e._v(" ID? a22940cd650ecbf823293f08836c8375199f7d1e\nPlease enter all the "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("node")]),e._v(" IDs.\n  Type "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'all'")]),e._v(" to use all the nodes as "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" nodes "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" the "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("hash")]),e._v(" slots.\n  Type "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'done'")]),e._v(" once you entered all the "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" nodes IDs.\nSource "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("node")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#1: cf52da2233fc7c0dc406f2f871e59afcdc31b121")]),e._v("\nSource "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("node")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#2: done")]),e._v("\n")])])]),t("blockquote",[t("p",[t("strong",[e._v("删除节点")])])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--cluster")]),e._v(" del-node "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6400 cf52da2233fc7c0dc406f2f871e59afcdc31b121\n\n/usr/local/redis/src/redis-cli "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--cluster")]),e._v(" del-node "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6401 ef7b5e0771fe4a1846ee3da4afc5192c96a2af3d\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);