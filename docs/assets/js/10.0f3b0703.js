(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{701:function(t,e,n){"use strict";n.r(e);var s=n(62),a=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"emq-x-集群部署"}},[e("code",[t._v("EMQ X")]),t._v(" 集群部署 "),e("a",{staticClass:"header-anchor",attrs:{href:"#emq-x-集群部署"}},[t._v("#")])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("EMQ X")]),t._v(" 消息服务器集群基于 "),e("code",[t._v("Erlang/OTP")]),t._v(" 分布式设计，集群原理可简述为下述两条规则:")]),t._v(" "),e("p",[e("code",[t._v("MQTT")]),t._v(" 客户端订阅主题时，所在节点订阅成功后广播通知其他节点：某个主题("),e("code",[t._v("Topic")]),t._v(")被本节点订阅。")]),t._v(" "),e("p",[e("code",[t._v("MQTT")]),t._v(" 客户端发布消息时，所在节点会根据消息主题("),e("code",[t._v("Topic")]),t._v(")，检索订阅并路由消息到相关节点。")])]),t._v(" "),e("h3",{attrs:{id:"_1-集群架构"}},[t._v("1. 集群架构 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_1-集群架构"}},[t._v("#")])]),t._v(" "),e("p",[e("img",{attrs:{src:"/assets/images/dc3/cluster/emqx/emqx-1.png",alt:""}})]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("EMQ X")]),t._v(" 消息服务器同一集群的所有节点，都会复制一份主题(Topic) -> 节点(Node)映射的路由表，例如:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("topic1 -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" node-01, node-02\ntopic2 -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" node-03\ntopic3 -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" node-02, node-04\n")])])])]),t._v(" "),e("h3",{attrs:{id:"_2-集群部署规划"}},[t._v("2. 集群部署规划 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_2-集群部署规划"}},[t._v("#")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[e("code",[t._v("item")])]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[e("code",[t._v("node 1")])]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[e("code",[t._v("node 2")])]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[e("code",[t._v("node 3")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("node.name")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("node-01@127.0.0.1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("node-02@127.0.0.1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("node-03@127.0.0.1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("mqtt:tcp:external")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3000")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3100")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3200")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("mqtt:ssl:external")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3010")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3110")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3210")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("mqtt:ws:external")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3020")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3120")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3220")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("mqtt:wss:external")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3030")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3130")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3230")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("http:management")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3040")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3140")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3240")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("http:dashboard")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3050")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3150")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3250")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("mqtt:tcp:internal")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("13000")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("13100")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("13200")])])])]),t._v(" "),e("h3",{attrs:{id:"_3-安装文件"}},[t._v("3. 安装文件 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_3-安装文件"}},[t._v("#")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("下载文件")])]),t._v(" "),e("p",[t._v("请下载 "),e("code",[t._v("ubuntu zip")]),t._v(" 版本")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("以 "),e("code",[t._v("4.3.10")]),t._v(" 版本为例：https://www.emqx.com/zh/downloads/broker/4.3.10/emqx-ubuntu20.04-4.3.10-amd64.zip")])]),t._v(" "),e("li",[e("p",[t._v("其他版本下载：https://www.emqx.com/zh/try?product=broker")])])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("解压文件")])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unzip")]),t._v(" emqx-ubuntu20.04-4.3.10-amd64.zip\n")])])]),e("h3",{attrs:{id:"_4-集群部署"}},[t._v("4. 集群部署 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-集群部署"}},[t._v("#")])]),t._v(" "),e("h4",{attrs:{id:"_4-1-创建文件目录"}},[t._v("4.1 创建文件目录 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-创建文件目录"}},[t._v("#")])]),t._v(" "),e("blockquote",[e("p",[t._v("分别创建三个节点（"),e("code",[t._v("node")]),t._v("）目录，多个以此类推 "),e("code",[t._v("node-N")])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /data\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" emqx/dc3/node-01 emqx/dc3/node-02 emqx/dc3/node-03\n")])])]),e("blockquote",[e("p",[t._v("将解压的 "),e("code",[t._v("emqx")]),t._v(" 文件放入到每个节点中，其他节点操作一致")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" emqx* emqx/dc3/node-01/\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pwd")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /data/emqx/dc3/node-01")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ls")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# bin data dynlibs erts-11.1.8 etc lib log releases")]),t._v("\n")])])]),e("h4",{attrs:{id:"_4-2-配置文件"}},[t._v("4.2 配置文件 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-配置文件"}},[t._v("#")])]),t._v(" "),e("blockquote",[e("p",[t._v("在每个节点的 "),e("code",[t._v("etc")]),t._v(" 下配置文件 "),e("code",[t._v("emqx.conf")]),t._v("、"),e("code",[t._v("plugins/emqx_dashboard.conf")]),t._v("、"),e("code",[t._v("plugins/emqx_management.conf")])])]),t._v(" "),e("h5",{attrs:{id:"_4-2-1-emqx-conf"}},[t._v("4.2.1 "),e("code",[t._v("emqx.conf")]),t._v(" "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-emqx-conf"}},[t._v("#")])]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## EMQ X Configuration 4.3")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: Do not change format of CONFIG_SECTION_{BGN,END} comments!")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_BGN=cluster ==================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Cluster name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\ncluster.name = dc3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("emqx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("cluster\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the erlang distributed protocol.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Enum")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - inet_tcp: the default; handles TCP streams with IPv4 addressing.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - inet6_tcp: handles TCP with IPv6 addressing.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - inet_tls: using TLS for Erlang Distribution.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## vm.args: -proto_dist inet_tcp")]),t._v("\ncluster.proto_dist = inet_tcp\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Cluster auto-discovery strategy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Enum")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - manual: Manual join command")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - static: Static node list")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - mcast:  IP Multicast")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - dns:    DNS A Record")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - etcd:   etcd")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - k8s:    Kubernetes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: manual")]),t._v("\ncluster.discovery = manual\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable cluster autoheal from network partition.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: on")]),t._v("\ncluster.autoheal = on\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Autoclean down node. A down node will be removed from the cluster")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## if this value > 0.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -h: hour, e.g. '2h' for 2 hours")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -m: minute, e.g. '5m' for 5 minutes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -s: second, e.g. '30s' for 30 seconds")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 5m")]),t._v("\ncluster.autoclean = 5m\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Cluster using static node list")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Node list of the cluster.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.static.seeds = emqx1@127.0.0.1,emqx2@127.0.0.1")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Cluster using IP Multicast.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## IP Multicast Address.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: IP Address")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.mcast.addr = 239.192.0.1")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Multicast Ports.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Port List")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.mcast.ports = 4369,4370")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Multicast Iface.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Iface Address")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 0.0.0.0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.mcast.iface = 0.0.0.0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Multicast Ttl.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: 0-255")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.mcast.ttl = 255")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Multicast loop.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.mcast.loop = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Cluster using DNS A records.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## DNS name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.dns.name = localhost")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The App name is used to build 'node.name' with IP address.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.dns.app = emqx")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Cluster using etcd")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Etcd server list, seperated by ','.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.etcd.server = http://127.0.0.1:2379")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The prefix helps build nodes path in etcd. Each node in the cluster")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## will create a path in etcd: v2/keys/<prefix>/<cluster.name>/<node.name>")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.etcd.prefix = dc3-emqx-cluster")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TTL for node's path in etcd.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 1m, 1 minute")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.etcd.node_ttl = 1m")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to a file containing the client's private PEM-encoded key.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.etcd.ssl.keyfile = etc/certs/client-key.pem")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The path to a file containing the client's certificate.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.etcd.ssl.certfile = etc/certs/client.pem")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to the file containing PEM-encoded CA certificates. The CA certificates")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## are used during server authentication and when building the client certificate chain.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.etcd.ssl.cacertfile = etc/certs/ca.pem")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Cluster using Kubernetes")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Kubernetes API server list, seperated by ','.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.k8s.apiserver = http://10.110.111.204:8080")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The service name helps lookup EMQ nodes in the cluster.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.k8s.service_name = emqx")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The address type is used to extract host from k8s service.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: ip | dns | hostname")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.k8s.address_type = ip")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The app name helps build 'node.name'.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.k8s.app_name = emqx")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The suffix added to dns and hostname get from k8s service")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.k8s.suffix = pod.cluster.local")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Kubernetes Namespace")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## cluster.k8s.namespace = default")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_END=cluster ==================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Node")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Node name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/reference_manual/distributed.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: <name>@<host>")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: node-01@127.0.0.1")]),t._v("\nnode.name = node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("01@127.0.0.1\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Cookie for distributed node communication.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\nnode.cookie = emqxsecretcookie\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Data dir for the node")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Folder")]),t._v("\nnode.data_dir = data\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Heartbeat monitoring of an Erlang runtime system. Comment the line to disable")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## heartbeat, or set the value as 'on'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Turning this on may cause the node to restart if it becomes unresponsive to")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the heartbeat pings.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: When managed by systemd (or other supervision tools like systemd),")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##       heart will probably only cause EMQ X to stop, but restart or not will")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##       depend on systemd's restart strategy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: When running in docker, the container will die as soon as the the")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##       heart process kills EMQ X, but restart or not will depend on container")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##       supervision strategy, such as k8s restartPolicy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## vm.args: -heart")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## node.heartbeat = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the number of threads in async thread pool. Valid range is 0-1024.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/erl.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: 0-1024")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## vm.args: +A Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## node.async_threads = 4")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the maximum number of simultaneously existing processes for this")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## system if a Number is passed as value.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/erl.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number [1024-134217727]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## vm.args: +P Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## node.process_limit = 2097152")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the maximum number of simultaneously existing ports for this system.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/erl.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number [1024-134217727]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## vm.args: +Q Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## node.max_ports = 1048576")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the distribution buffer busy limit (dist_buf_busy_limit).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/erl.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number [1KB-2GB]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## vm.args: +zdbbl size")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## node.dist_buffer_size = 8MB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the maximum number of ETS tables. Note that mnesia and SSL will")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## create temporary ETS tables.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## vm.args: +e Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## node.max_ets_tables = 262144")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Global GC Interval.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Examples:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - 2h:  2 hours")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - 30m: 30 minutes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - 20s: 20 seconds")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Defaut: 15 minutes")]),t._v("\nnode.global_gc_interval = 15m\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Tweak GC to run more often.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number [0-65535]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## vm.args: -env ERL_FULLSWEEP_AFTER Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## node.fullsweep_after = 1000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Crash dump log file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Log file")]),t._v("\nnode.crash_dump = log/crash.dump\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify SSL Options in the file if using SSL for Erlang Distribution.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## vm.args: -ssl_dist_optfile <File>")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## node.ssl_dist_optfile = etc/ssl_dist.conf")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the net_kernel tick time. TickTime is specified in seconds.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Notice that all communicating nodes are to have the same TickTime")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## value specified.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://www.erlang.org/doc/man/kernel_app.html#net_ticktime")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## vm.args: -kernel net_ticktime Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## node.dist_net_ticktime = 120")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the port range for the listener socket of a distributed Erlang node.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Note that if there are firewalls between clustered nodes, this port segment")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## for nodes’ communication should be allowed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://www.erlang.org/doc/man/kernel_app.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Port [1024-65535]")]),t._v("\nnode.dist_listen_min = 6369\nnode.dist_listen_max = 6369\n\nnode.backtrace_depth = 16\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_BGN=rpc ======================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## RPC Mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: sync | async")]),t._v("\nrpc.mode = async\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Max batch size of async RPC requests.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Integer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Zero or negative value disables rpc batching.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: RPC batch won't work when rpc.mode = sync")]),t._v("\nrpc.async_batch_size = 256\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## RPC port discovery")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The strategy for discovering the RPC listening port of other nodes.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Enum")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - manual: discover ports by `tcp_server_port` and `tcp_client_port`.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - stateless: discover ports in a stateless manner.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   If node name is `emqx<N>@127.0.0.1`, where the `<N>` is an integer,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   then the listening port will be `5370 + <N>`")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Defaults to `stateless`.")]),t._v("\nrpc.port_discovery = stateless\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TCP port number for RPC server to listen on.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Only takes effect when `rpc.port_discovery` = `manual`.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: All nodes in the cluster should agree to this same config.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Port [1024-65535]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#rpc.tcp_server_port = 5369")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Number of outgoing RPC connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Interger [0-256]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default = 1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#rpc.tcp_client_num = 1")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## RCP Client connect timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Seconds")]),t._v("\nrpc.connect_timeout = 5s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TCP send timeout of RPC client and server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Seconds")]),t._v("\nrpc.send_timeout = 5s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Authentication timeout")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Seconds")]),t._v("\nrpc.authentication_timeout = 5s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default receive timeout for call() functions")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Seconds")]),t._v("\nrpc.call_receive_timeout = 15s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Socket idle keepalive.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Seconds")]),t._v("\nrpc.socket_keepalive_idle = 900s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TCP Keepalive probes interval.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Seconds")]),t._v("\nrpc.socket_keepalive_interval = 75s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Probes lost to close the connection")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Integer")]),t._v("\nrpc.socket_keepalive_count = 9\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Size of TCP send buffer.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\nrpc.socket_sndbuf = 1MB\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Size of TCP receive buffer.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Seconds")]),t._v("\nrpc.socket_recbuf = 1MB\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Size of user-level software socket buffer.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Seconds")]),t._v("\nrpc.socket_buffer = 1MB\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_END=rpc ======================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_BGN=logger ===================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Where to emit the logs.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable the console (standard output) logs.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: file | console | both")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - file: write logs only to file")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - console: write logs only to standard I/O")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - both: write logs both to file and standard I/O")]),t._v("\nlog.to = file\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The log severity level.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: debug | info | notice | warning | error | critical | alert | emergency")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Note: Only the messages with severity level higher than or equal to")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##       this level will be logged.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: warning")]),t._v("\nlog.level = warning\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The dir for log files.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Folder")]),t._v("\nlog.dir = log\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## The log filename for logs of level specified in "log.level".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If `log.rotation` is enabled, this is the base name of the")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## files. Each file in a rotated log is named <base_name>.N, where N is an integer.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: emqx.log")]),t._v("\nlog.file = emqx.log\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Limits the total number of characters printed for each log event.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Integer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: No Limit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.chars_limit = 8192")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum depth for Erlang term log formatting")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## and Erlang process message queue inspection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Integer or 'unlimited' (without quotes)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 100")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.max_depth = 100")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log formatter")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: text | json")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.formatter = text")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log to single line")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Boolean")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.single_line = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enables the log rotation.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## With this enabled, new log files will be created when the current")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## log file is full, max to `log.rotation.size` files will be created.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: on")]),t._v("\nlog.rotation = on\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum size of each log file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 10M")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Supported Unit: KB | MB | GB")]),t._v("\nlog.rotation.size = 10MB\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum rotation count of log files.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 5")]),t._v("\nlog.rotation.count = 5\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To create additional log files for specific log levels.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File Name")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Format: log.$level.file = $filename,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('##         where "$level" can be one of: debug, info, notice, warning,')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##                                       error, critical, alert, emergency")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Note: Log files for a specific log level will only contain all the logs")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##       that higher than or equal to that level")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.info.file  = info.log")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.error.file = error.log")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The max allowed queue length before switching to sync mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log overload protection parameter. If the message queue grows")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## larger than this value the handler switches from anync to sync mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 100")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.sync_mode_qlen = 100")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The max allowed queue length before switching to drop mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log overload protection parameter. When the message queue grows")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## larger than this threshold, the handler switches to a mode in which")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## it drops all new events that senders want to log.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 3000")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.drop_mode_qlen = 3000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The max allowed queue length before switching to flush mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log overload protection parameter. If the length of the message queue")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## grows larger than this threshold, a flush (delete) operation takes place.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To flush events, the handler discards the messages in the message queue")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## by receiving them in a loop without logging.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 8000")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.flush_qlen = 8000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Kill the log handler when it gets overloaded.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log overload protection parameter. It is possible that a handler,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## even if it can successfully manage peaks of high load without crashing,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## can build up a large message queue, or use a large amount of memory.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## We could kill the log handler in these cases and restart it after a")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## few seconds.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: on")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.overload_kill = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The max allowed queue length before killing the log hanlder.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log overload protection parameter. This is the maximum allowed queue")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## length. If the message queue grows larger than this, the handler")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## process is terminated.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 20000")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.overload_kill_qlen = 20000")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The max allowed memory size before killing the log hanlder.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log overload protection parameter. This is the maximum memory size")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## that the handler process is allowed to use. If the handler grows")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## larger than this, the process is terminated.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 30MB")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.overload_kill_mem_size = 30MB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Restart the log hanlder after some seconds.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log overload protection parameter. If the handler is terminated,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## it restarts automatically after a delay specified in seconds.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## The value "infinity" prevents restarts.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 5s")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.overload_kill_restart_after = 5s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Max burst count and time window for burst control.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Log overload protection parameter. Large bursts of log events - many")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## events received by the handler under a short period of time - can")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## potentially cause problems. By specifying the maximum number of events")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## to be handled within a certain time frame, the handler can avoid")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## choking the log with massive amounts of printouts.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This config controls the maximum number of events to handle within")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## a time frame. After the limit is reached, successive events are")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dropped until the end of the time frame.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Note that there would be no warning if any messages were")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dropped because of burst control.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Comment this config out to disable the burst control feature.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: MaxBurstCount,TimeWindow")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: disabled")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log.burst_limit = 20000, 1s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_END=logger ===================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Authentication/Access Control")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Allow anonymous authentication by default if no auth plugins loaded.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Notice: Disable the option in production deployment!")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nallow_anonymous = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Allow or deny if no ACL rules matched.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: allow | deny")]),t._v("\nacl_nomatch = allow\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default ACL File.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File Name")]),t._v("\nacl_file = etc/acl.conf\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether to enable ACL cache.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If enabled, ACLs roles for each client will be cached in the memory")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\nenable_acl_cache = on\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The maximum count of ACL entries can be cached for a client.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Integer greater than 0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 32")]),t._v("\nacl_cache_max_size = 32\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The time after which an ACL cache entry will be deleted")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 1 minute")]),t._v("\nacl_cache_ttl = 1m\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The action when acl check reject current operation")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: ignore | disconnect")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: ignore")]),t._v("\nacl_deny_action = ignore\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the global flapping detect policy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The value is a string composed of flapping threshold, duration and banned interval.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 1. threshold: an integer to specfify the disconnected times of a MQTT Client;")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 2. duration: the time window for flapping detect;")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 3. banned interval: the banned interval if a flapping is detected.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Integer,Duration,Duration")]),t._v("\nflapping_detect_policy = 30"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 1m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 5m\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## MQTT Protocol")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum MQTT packet size allowed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 1MB")]),t._v("\nmqtt.max_packet_size = 1MB\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum length of MQTT clientId allowed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number [23-65535]")]),t._v("\nmqtt.max_clientid_len = 65535\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum topic levels allowed. 0 means no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nmqtt.max_topic_levels = 0\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum QoS allowed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: 0 | 1 | 2")]),t._v("\nmqtt.max_qos_allowed = 2\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum Topic Alias, 0 means no topic alias supported.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: 0-65535")]),t._v("\nmqtt.max_topic_alias = 65535\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether the Server supports MQTT retained messages.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: boolean")]),t._v("\nmqtt.retain_available = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether the Server supports MQTT Wildcard Subscriptions")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: boolean")]),t._v("\nmqtt.wildcard_subscription = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether the Server supports MQTT Shared Subscriptions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: boolean")]),t._v("\nmqtt.shared_subscription = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether to ignore loop delivery of messages.(for mqtt v3.1.1)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nmqtt.ignore_loop_deliver = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether to parse the MQTT frame in strict mode")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nmqtt.strict_mode = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the response information returned to the client")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## mqtt.response_information = example")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_BGN=zones  ===================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## External Zone")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Idle timeout of the external MQTT connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: duration")]),t._v("\nzone.external.idle_timeout = 15s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable ACL check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Flag")]),t._v("\nzone.external.enable_acl = on\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable ban check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Flag")]),t._v("\nzone.external.enable_ban = on\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable per connection statistics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\nzone.external.enable_stats = on\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The action when acl check reject current operation")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: ignore | disconnect")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: ignore")]),t._v("\nzone.external.acl_deny_action = ignore\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Force the MQTT connection process GC after this number of")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## messages | bytes passed through.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Numbers delimited by `|'. Zero or negative is to disable.")]),t._v("\nzone.external.force_gc_policy = 16000"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("16MB\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Max message queue length and total heap size to force shutdown")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## connection/session process.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Message queue here is the Erlang process mailbox, but not the number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## of queued MQTT messages of QoS 1 and 2.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Numbers delimited by `|'. Zero or negative is to disable.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - 10000|64MB on ARCH_64 system")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - 1000|32MB  on ARCH_32 sytem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#zone.external.force_shutdown_policy = 10000|64MB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum MQTT packet size allowed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 1MB")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.external.max_packet_size = 64KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum length of MQTT clientId allowed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number [23-65535]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.external.max_clientid_len = 1024")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum topic levels allowed. 0 means no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.external.max_topic_levels = 7")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum QoS allowed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: 0 | 1 | 2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.external.max_qos_allowed = 2")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum Topic Alias, 0 means no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: 0-65535")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.external.max_topic_alias = 65535")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether the Server supports retained messages.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: boolean")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.external.retain_available = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether the Server supports Wildcard Subscriptions")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: boolean")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.external.wildcard_subscription = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether the Server supports Shared Subscriptions")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: boolean")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.external.shared_subscription = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Server Keep Alive")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.external.server_keepalive = 0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The backoff for MQTT keepalive timeout. The broker will kick a connection out")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## until 'Keepalive * backoff * 2' timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Float > 0.5")]),t._v("\nzone.external.keepalive_backoff = 0.75\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum number of subscriptions allowed, 0 means no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nzone.external.max_subscriptions = 0\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Force to upgrade QoS according to subscription.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\nzone.external.upgrade_qos = off\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum size of the Inflight Window storing QoS1/2 messages delivered but unacked.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nzone.external.max_inflight = 32\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Retry interval for QoS1/2 message delivering.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\nzone.external.retry_interval = 30s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum QoS2 packets (Client -> Broker) awaiting PUBREL, 0 means no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nzone.external.max_awaiting_rel = 100\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The QoS2 messages (Client -> Broker) will be dropped if awaiting PUBREL timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\nzone.external.await_rel_timeout = 300s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default session expiry interval for MQTT V3.1.1 connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -d: day")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -h: hour")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -m: minute")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -s: second")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 2h, 2 hours")]),t._v("\nzone.external.session_expiry_interval = 2h\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum queue length. Enqueued messages when persistent client disconnected,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## or inflight window is full. 0 means no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number >= 0")]),t._v("\nzone.external.max_mqueue_len = 1000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Topic priorities.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 'none' to indicate no priority table (by default), hence all messages")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## are treated equal")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Priority number [1-255]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Example: topic/1=10,topic/2=8")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: comma and equal signs are not allowed for priority topic names")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: messages for topics not in the priority table are treated as")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##       either highest or lowest priority depending on the configured")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##       value for mqueue_default_priority")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\nzone.external.mqueue_priorities = none\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default to highest priority for topics not matching priority table")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: highest | lowest")]),t._v("\nzone.external.mqueue_default_priority = highest\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether to enqueue QoS0 messages.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: false | true")]),t._v("\nzone.external.mqueue_store_qos0 = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether to turn on flapping detect")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\nzone.external.enable_flapping_detect = off\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Message limit for the a external MQTT connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number,Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Example: 100 messages per 10 seconds.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#zone.external.rate_limit.conn_messages_in = 100,10s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Bytes limit for a external MQTT connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number,Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Example: 100KB incoming per 10 seconds.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#zone.external.rate_limit.conn_bytes_in = 100KB,10s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether to alarm the congested connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Sometimes the mqtt connection (usually an MQTT subscriber) may get "congested" because')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## there're too many packets to sent. The socket trys to buffer the packets until the buffer is")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## full. If more packets comes after that, the packets will be "pending" in a queue')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## and we consider the connection is "congested".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable this to send an alarm when there's any bytes pending in the queue. You could set")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the `listener.tcp.<ZoneName>.sndbuf` to a larger value if the alarm is triggered too often.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## The name of the alarm is of format "conn_congestion/<ClientID>/<Username>".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Where the <ClientID> is the client-id of the congested MQTT connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## And the <Username> is the username or "unknown_user" of not provided by the client.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#zone.external.conn_congestion.alarm = off")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Won't clear the congested alarm in how long time.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The alarm is cleared only when there're no pending bytes in the queue, and also it has been")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## `min_alarm_sustain_duration` time since the last time we considered the connection is "congested".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This is to avoid clearing and sending the alarm again too often.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 1m")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#zone.external.conn_congestion.min_alarm_sustain_duration = 1m")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Messages quota for the each of external MQTT connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This value consumed by the number of recipient on a message.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number, Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Example: 100 messaegs per 1s")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#zone.external.quota.conn_messages_routing = 100,1s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Messages quota for the all of external MQTT connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This value consumed by the number of recipient on a message.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number, Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Example: 200000 messaegs per 1s")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#zone.external.quota.overall_messages_routing = 200000,1s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## All the topics will be prefixed with the mountpoint path if this option is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Variables in mountpoint path:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - %c: clientid")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - %u: username")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.external.mountpoint = devicebound/")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether use username replace client id")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: boolean")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: false")]),t._v("\nzone.external.use_username_as_clientid = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether to ignore loop delivery of messages.(for mqtt v3.1.1)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nzone.external.ignore_loop_deliver = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether to parse the MQTT frame in strict mode")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nzone.external.strict_mode = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the response information returned to the client")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.external.response_information = example")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Internal Zone")]),t._v("\n\nzone.internal.allow_anonymous = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable per connection stats.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Flag")]),t._v("\nzone.internal.enable_stats = on\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable ACL check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Flag")]),t._v("\nzone.internal.enable_acl = off\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The action when acl check reject current operation")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: ignore | disconnect")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: ignore")]),t._v("\nzone.internal.acl_deny_action = ignore\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See zone.$name.force_gc_policy")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.internal.force_gc_policy = 128000|128MB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See zone.$name.wildcard_subscription.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: boolean")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.internal.wildcard_subscription = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See zone.$name.shared_subscription.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: boolean")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.internal.shared_subscription = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See zone.$name.max_subscriptions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Integer")]),t._v("\nzone.internal.max_subscriptions = 0\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See zone.$name.max_inflight")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nzone.internal.max_inflight = 128\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See zone.$name.max_awaiting_rel")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nzone.internal.max_awaiting_rel = 1000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See zone.$name.max_mqueue_len")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number >= 0")]),t._v("\nzone.internal.max_mqueue_len = 10000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether to enqueue Qos0 messages.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: false | true")]),t._v("\nzone.internal.mqueue_store_qos0 = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether to turn on flapping detect")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\nzone.internal.enable_flapping_detect = off\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See zone.$name.force_shutdown_policy")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - 10000|64MB on ARCH_64 system")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   - 1000|32MB  on ARCH_32 sytem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#zone.internal.force_shutdown_policy = 10000|64MB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## All the topics will be prefixed with the mountpoint path if this option is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Variables in mountpoint path:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - %c: clientid")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - %u: username")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.internal.mountpoint = cloudbound/")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether to ignore loop delivery of messages.(for mqtt v3.1.1)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nzone.internal.ignore_loop_deliver = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether to parse the MQTT frame in strict mode")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nzone.internal.strict_mode = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the response information returned to the client")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## zone.internal.response_information = example")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Allow the zone's clients to bypass authentication step")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nzone.internal.bypass_auth_plugins = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_END=zones ====================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_BGN=listeners ================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## MQTT/TCP - External TCP Listener for MQTT Protocol")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.tcp.$name is the IP address and port that the MQTT/TCP")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener will bind.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: IP:Port | Port")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Examples: 3000, 127.0.0.1:3000, ::1:3000")]),t._v("\nlistener.tcp.external = 3000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The acceptor pool for external MQTT/TCP listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.tcp.external.acceptors = 8\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum number of concurrent MQTT/TCP connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.tcp.external.max_connections = 1024000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum external connections per second.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.tcp.external.max_conn_rate = 1000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the {active, N} option for the external MQTT/TCP Socket.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.tcp.external.active_n = 100\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Zone of the external MQTT/TCP listener belonged to.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: zone.$name.*")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\nlistener.tcp.external.zone = external\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The access control rules for the MQTT/TCP listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: https://github.com/emqtt/esockd#allowdeny")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: ACL Rule")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Example: allow 192.168.0.0/24")]),t._v("\nlistener.tcp.external.access.1 = allow all\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable the Proxy Protocol V1/2 if the EMQ X cluster is deployed")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## behind HAProxy or Nginx.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: https://www.haproxy.com/blog/haproxy/proxy-protocol/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.tcp.external.proxy_protocol = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the timeout for proxy protocol. EMQ X will close the TCP connection")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## if no proxy protocol packet recevied within the timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.tcp.external.proxy_protocol_timeout = 3s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable the option for X.509 certificate based authentication.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## EMQX will use the common name of certificate as MQTT username.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Only support Proxy Protocol V2, the CN is available in Proxy Protocol V2 additional info")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: cn")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.tcp.external.peer_cert_as_username = cn")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable the option for X.509 certificate based authentication.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## EMQX will use the common name of certificate as MQTT clientid.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Only support Proxy Protocol V2, the CN is available in Proxy Protocol V2 additional info")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: cn")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.tcp.external.peer_cert_as_clientid = cn")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP backlog defines the maximum length that the queue of pending")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## connections can grow to.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number >= 0")]),t._v("\nlistener.tcp.external.backlog = 1024\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP send timeout for external MQTT connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\nlistener.tcp.external.send_timeout = 15s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Close the TCP connection if send timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\nlistener.tcp.external.send_timeout_close = on\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP receive buffer(os kernel) for MQTT connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/inet.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.tcp.external.recbuf = 2KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP send buffer(os kernel) for MQTT connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/inet.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.tcp.external.sndbuf = 2KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The size of the user-level software buffer used by the driver.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Not to be confused with options sndbuf and recbuf, which correspond")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## to the Kernel socket buffers. It is recommended to have val(buffer)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## >= max(val(sndbuf),val(recbuf)) to avoid performance issues because")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## of unnecessary copying. val(buffer) is automatically set to the above")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## maximum when values sndbuf or recbuf are set.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/inet.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.tcp.external.buffer = 2KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the 'buffer = max(sndbuf, recbuf)' if this option is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.tcp.external.tune_buffer = off")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The socket is set to a busy state when the amount of data queued internally")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## by the ERTS socket implementation reaches this limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Defaults to 1MB")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.tcp.external.high_watermark = 1MB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP_NODELAY flag for MQTT connections. Small amounts of data are")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## sent immediately if the option is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nlistener.tcp.external.nodelay = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The SO_REUSEADDR flag for TCP listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nlistener.tcp.external.reuseaddr = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Internal TCP Listener for MQTT Protocol")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The IP address and port that the internal MQTT/TCP protocol listener")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## will bind.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: IP:Port, Port")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Examples: 13000, 127.0.0.1:13000, ::1:13000")]),t._v("\nlistener.tcp.internal = 13000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The acceptor pool for internal MQTT/TCP listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.tcp.internal.acceptors = 4\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum number of concurrent MQTT/TCP connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.tcp.internal.max_connections = 1024000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum internal connections per second.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.tcp.internal.max_conn_rate = 1000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the {active, N} option for the internal MQTT/TCP Socket.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.tcp.internal.active_n = 1000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Zone of the internal MQTT/TCP listener belonged to.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\nlistener.tcp.internal.zone = internal\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP backlog of internal MQTT/TCP Listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.backlog")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number >= 0")]),t._v("\nlistener.tcp.internal.backlog = 512\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP send timeout for internal MQTT connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.send_timeout")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\nlistener.tcp.internal.send_timeout = 5s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Close the MQTT/TCP connection if send timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.send_timeout_close")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\nlistener.tcp.internal.send_timeout_close = on\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP receive buffer(os kernel) for internal MQTT connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.recbuf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\nlistener.tcp.internal.recbuf = 64KB\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP send buffer(os kernel) for internal MQTT connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/inet.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\nlistener.tcp.internal.sndbuf = 64KB\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The size of the user-level software buffer used by the driver.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.buffer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.tcp.internal.buffer = 16KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the 'buffer = max(sndbuf, recbuf)' if this option is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.tune_buffer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.tcp.internal.tune_buffer = off")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP_NODELAY flag for internal MQTT connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.nodelay")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nlistener.tcp.internal.nodelay = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The SO_REUSEADDR flag for MQTT/TCP Listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nlistener.tcp.internal.reuseaddr = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## MQTT/SSL - External SSL Listener for MQTT Protocol")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.$name is the IP address and port that the MQTT/SSL")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener will bind.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: IP:Port | Port")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Examples: 3010, 127.0.0.1:3010, ::1:3010")]),t._v("\nlistener.ssl.external = 3010\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The acceptor pool for external MQTT/SSL listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.ssl.external.acceptors = 16\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum number of concurrent MQTT/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.ssl.external.max_connections = 102400\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum MQTT/SSL connections per second.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.ssl.external.max_conn_rate = 500\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the {active, N} option for the internal MQTT/SSL Socket.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.ssl.external.active_n = 100\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Zone of the external MQTT/SSL listener belonged to.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\nlistener.ssl.external.zone = external\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The access control rules for the MQTT/SSL listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.access")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: ACL Rule")]),t._v("\nlistener.ssl.external.access.1 = allow all\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable the Proxy Protocol V1/2 if the EMQ cluster is deployed behind")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## HAProxy or Nginx.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.proxy_protocol")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.proxy_protocol = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the timeout for proxy protocol.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.proxy_protocol_timeout")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.proxy_protocol_timeout = 3s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS versions only to protect from POODLE attack.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/ssl.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String, seperated by ','")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: Do not use tlsv1.3 if emqx is running on OTP-22 or earlier")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.tls_versions = tlsv1.3,tlsv1.2,tlsv1.1,tlsv1")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS Handshake timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\nlistener.ssl.external.handshake_timeout = 15s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum number of non-self-issued intermediate certificates that")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## can follow the peer certificate in a valid certification path.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.depth = 10")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## String containing the user's password. Only used if the private keyfile")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## is password-protected.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.key_password = yourpass")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to the file containing the user's private PEM-encoded key.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/ssl.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\nlistener.ssl.external.keyfile = etc/certs/key.pem\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to a file containing the user certificate.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/ssl.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\nlistener.ssl.external.certfile = etc/certs/cert.pem\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to the file containing PEM-encoded CA certificates. The CA certificates")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## are used during server authentication and when building the client certificate chain.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.cacertfile = etc/certs/cacert.pem")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The Ephemeral Diffie-Helman key exchange is a very effective way of")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ensuring Forward Secrecy by exchanging a set of keys that never hit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the wire. Since the DH key is effectively signed by the private key,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## it needs to be at least as strong as the private key. In addition,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the default DH groups that most of the OpenSSL installations have")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## are only a handful (since they are distributed with the OpenSSL")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## package that has been built for the operating system it’s running on)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## and hence predictable (not to mention, 1024 bits only).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## In order to escape this situation, first we need to generate a fresh,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## strong DH group, store it in a file and then use the option above,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## to force our SSL application to use the new DH group. Fortunately,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## OpenSSL provides us with a tool to do that. Simply run:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## openssl dhparam -out dh-params.pem 2048")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.dhfile = etc/certs/dh-params.pem")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## A server only does x509-path validation in mode verify_peer,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## as it then sends a certificate request to the client (this")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## message is not sent if the verify option is verify_none).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## You can then also want to specify option fail_if_no_peer_cert.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## More information at: http://erlang.org/doc/man/ssl.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: verify_peer | verify_none")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.verify = verify_peer")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Used together with {verify, verify_peer} by an SSL server. If set to true,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the server fails if the client does not have a certificate to send, that is,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## sends an empty certificate.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.fail_if_no_peer_cert = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This is the single most important configuration option of an Erlang SSL")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## application. Ciphers (and their ordering) define the way the client and")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## server encrypt information over the wire, from the initial Diffie-Helman")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## key exchange, the session key encryption ## algorithm and the message")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## digest algorithm. Selecting a good cipher suite is critical for the")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## application’s data security, confidentiality and performance.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The cipher list above offers:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## A good balance between compatibility with older browsers.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## It can get stricter for Machine-To-Machine scenarios.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Perfect Forward Secrecy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## No old/insecure encryption and HMAC algorithms")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Most of it was copied from Mozilla’s Server Side TLS article")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Ciphers")]),t._v("\nlistener.ssl.external.ciphers = TLS_AES_256_GCM_SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("TLS_AES_128_GCM_SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("TLS_CHACHA20_POLY1305_SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("TLS_AES_128_CCM_SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("TLS_AES_128_CCM_8_SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DES"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("CBC3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DSS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DSS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DSS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DSS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DSS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DSS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Ciphers for TLS PSK.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Note that 'listener.ssl.external.ciphers' and 'listener.ssl.external.psk_ciphers' cannot")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## be configured at the same time.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See 'https://tools.ietf.org/html/rfc4279#section-2'.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#listener.ssl.external.psk_ciphers = PSK-AES128-CBC-SHA,PSK-AES256-CBC-SHA,PSK-3DES-EDE-CBC-SHA,PSK-RC4-SHA")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## SSL parameter renegotiation is a feature that allows a client and a server")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## to renegotiate the parameters of the SSL connection on the fly.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## RFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## you drop support for the insecure renegotiation, prone to MitM attacks.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.secure_renegotiate = off")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## A performance optimization setting, it allows clients to reuse")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## pre-existing sessions, instead of initializing new ones.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Read more about it here.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/ssl.html")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.reuse_sessions = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## An important security setting, it forces the cipher to be set based")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## on the server-specified order instead of the client-specified order,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## hence enforcing the (usually more properly configured) security")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ordering of the server administrator.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.honor_cipher_order = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Use the CN, DN or CRT field from the client certificate as a username.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Notice that 'verify' should be set as 'verify_peer'.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 'pem' encodes CRT in base64, and md5 is the md5 hash of CRT.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: cn | dn | crt | pem | md5")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.peer_cert_as_username = cn")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Use the CN, DN or CRT field from the client certificate as a username.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Notice that 'verify' should be set as 'verify_peer'.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 'pem' encodes CRT in base64, and md5 is the md5 hash of CRT.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: cn | dn | crt | pem | md5")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.peer_cert_as_clientid = cn")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TCP backlog for the SSL connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See listener.tcp.$name.backlog")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number >= 0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.backlog = 1024")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP send timeout for the SSL connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See listener.tcp.$name.send_timeout")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.send_timeout = 15s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Close the SSL connection if send timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.send_timeout_close")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.send_timeout_close = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP receive buffer(os kernel) for the SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.recbuf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.recbuf = 4KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP send buffer(os kernel) for internal MQTT connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.sndbuf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.sndbuf = 4KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The size of the user-level software buffer used by the driver.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.buffer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.buffer = 4KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the 'buffer = max(sndbuf, recbuf)' if this option is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.tune_buffer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.tune_buffer = off")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP_NODELAY flag for SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.nodelay")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.nodelay = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The SO_REUSEADDR flag for MQTT/SSL Listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nlistener.ssl.external.reuseaddr = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## External WebSocket listener for MQTT protocol")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.$name is the IP address and port that the MQTT/WebSocket")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener will bind.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: IP:Port | Port")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Examples: 3020, 127.0.0.1:3020, ::1:3020")]),t._v("\nlistener.ws.external = 3020\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The path of WebSocket MQTT endpoint")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: URL Path")]),t._v("\nlistener.ws.external.mqtt_path = /mqtt\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The acceptor pool for external MQTT/WebSocket listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.ws.external.acceptors = 4\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum number of concurrent MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.ws.external.max_connections = 102400\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum MQTT/WebSocket connections per second.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.ws.external.max_conn_rate = 1000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Simulate the {active, N} option for the MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.ws.external.active_n = 100\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Zone of the external MQTT/WebSocket listener belonged to.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\nlistener.ws.external.zone = external\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The access control for the MQTT/WebSocket listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.access")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: ACL Rule")]),t._v("\nlistener.ws.external.access.1 = allow all\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If set to true, the server fails if the client does not have a Sec-WebSocket-Protocol to send.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set to false for WeChat MiniApp.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.fail_if_no_subprotocol = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Supported subprotocols")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.supported_subprotocols = mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify which HTTP header for real source IP if the EMQ X cluster is")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## deployed behind NGINX or HAProxy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: X-Forwarded-For")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.proxy_address_header = X-Forwarded-For")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify which HTTP header for real source port if the EMQ X cluster is")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## deployed behind NGINX or HAProxy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: X-Forwarded-Port")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.proxy_port_header = X-Forwarded-Port")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable the Proxy Protocol V1/2 if the EMQ cluster is deployed behind")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## HAProxy or Nginx.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.proxy_protocol")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.proxy_protocol = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the timeout for proxy protocol.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.proxy_protocol_timeout")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.proxy_protocol_timeout = 3s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable the option for X.509 certificate based authentication.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## EMQX will use the common name of certificate as MQTT username.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Only support Proxy Protocol V2, the CN is available in Proxy Protocol V2 additional info")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: cn")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.peer_cert_as_username = cn")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable the option for X.509 certificate based authentication.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## EMQX will use the common name of certificate as MQTT clientid.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Only support Proxy Protocol V2, the CN is available in Proxy Protocol V2 additional info")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: cn")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.peer_cert_as_clientid = cn")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP backlog of external MQTT/WebSocket Listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.backlog")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number >= 0")]),t._v("\nlistener.ws.external.backlog = 1024\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP send timeout for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.send_timeout")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\nlistener.ws.external.send_timeout = 15s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Close the MQTT/WebSocket connection if send timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.send_timeout_close")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\nlistener.ws.external.send_timeout_close = on\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP receive buffer(os kernel) for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.recbuf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.recbuf = 2KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP send buffer(os kernel) for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.sndbuf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.sndbuf = 2KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The size of the user-level software buffer used by the driver.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.buffer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.buffer = 2KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the 'buffer = max(sndbuf, recbuf)' if this option is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.tune_buffer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.tune_buffer = off")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP_NODELAY flag for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.nodelay")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nlistener.ws.external.nodelay = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The compress flag for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If this Value is set true,the websocket message would be compressed")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.compress = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The level of deflate options for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.deflate_opts.level")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: none | default | best_compression | best_speed")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.deflate_opts.level = default")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The mem_level of deflate options for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.deflate_opts.mem_level")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Valid range is 1-9")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.deflate_opts.mem_level = 8")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The strategy of deflate options for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.deflate_opts.strategy")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: default | filtered | huffman_only | rle")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.deflate_opts.strategy = default")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The deflate option for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.deflate_opts.server_context_takeover")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: takeover | no_takeover")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.deflate_opts.server_context_takeover = takeover")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The deflate option for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.deflate_opts.client_context_takeover")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: takeover | no_takeover")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.deflate_opts.client_context_takeover = takeover")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The deflate options for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.deflate_opts.server_max_window_bits")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Valid range is 8-15")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.deflate_opts.server_max_window_bits = 15")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The deflate options for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.deflate_opts.client_max_window_bits")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Valid range is 8-15")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.deflate_opts.client_max_window_bits = 15")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The idle timeout for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ws.$name.idle_timeout")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.idle_timeout = 60s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The max frame size for external MQTT/WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.max_frame_size = 0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether a WebSocket message is allowed to contain multiple MQTT packets")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: single | multiple")]),t._v("\nlistener.ws.external.mqtt_piggyback = multiple\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## By default, EMQX web socket connection does not restrict connections to specific origins.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## It also, by default, does not enforce the presence of origin in request headers for WebSocket connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Because of this, a malicious user could potentially hijack an existing web-socket connection to EMQX.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To prevent this, users can set allowed origin headers in their ws connection to EMQX.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## WS configs are set in listener.ws.external.*")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## WSS configs are set in listener.wss.external.*")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Example for WS connection")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To enables origin check in header for websocket connnection,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## set `listener.ws.external.check_origin_enable = true`. By default it is false,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## When it is set to true and no origin is present in the header of a ws connection request, the request fails.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To allow origins to be absent in header in the websocket connection when check_origin_enable is true,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## set `listener.ws.external.allow_origin_absence = true`")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enabling origin check implies there are specific valid origins allowed for ws connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To set the list of allowed origins in header for websocket connection")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ws.external.check_origins = http://localhost:13020(localhost dashboard url), http://yourapp.com`")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## check_origins config allows a comma separated list of origins so you can specify as many origins are you want.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## With these configs, you can allow only connections from only authorized origins to your broker")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable origin check in header for websocket connection")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false (default false)")]),t._v("\nlistener.ws.external.check_origin_enable = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Allow origin to be absent in header in websocket connection when check_origin_enable is true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false (default true)")]),t._v("\nlistener.ws.external.allow_origin_absence = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Comma separated list of allowed origin in header for websocket connection")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: http://url eg. local http dashboard url - http://localhost:13020, http://127.0.0.1:13020")]),t._v("\nlistener.ws.external.check_origins = http"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("13020")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" http"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("13020")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## External WebSocket/SSL listener for MQTT Protocol")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.$name is the IP address and port that the MQTT/WebSocket/SSL")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener will bind.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: IP:Port | Port")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Examples: 3030, 127.0.0.1:3030, ::1:3030")]),t._v("\nlistener.wss.external = 3030\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The path of WebSocket MQTT endpoint")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: URL Path")]),t._v("\nlistener.wss.external.mqtt_path = /mqtt\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The acceptor pool for external MQTT/WebSocket/SSL listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.wss.external.acceptors = 4\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum number of concurrent MQTT/Webwocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.wss.external.max_connections = 102400\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum MQTT/WebSocket/SSL connections per second.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.max_conn_rate")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.wss.external.max_conn_rate = 1000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Simulate the {active, N} option for the MQTT/WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\nlistener.wss.external.active_n = 100\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Zone of the external MQTT/WebSocket/SSL listener belonged to.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\nlistener.wss.external.zone = external\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The access control rules for the MQTT/WebSocket/SSL listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.access.<no>")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: ACL Rule")]),t._v("\nlistener.wss.external.access.1 = allow all\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If set to true, the server fails if the client does not have a Sec-WebSocket-Protocol to send.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set to false for WeChat MiniApp.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.fail_if_no_subprotocol = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Supported subprotocols")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.supported_subprotocols = mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify which HTTP header for real source IP if the EMQ X cluster is")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## deployed behind NGINX or HAProxy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: X-Forwarded-For")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.proxy_address_header = X-Forwarded-For")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify which HTTP header for real source port if the EMQ X cluster is")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## deployed behind NGINX or HAProxy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: X-Forwarded-Port")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.proxy_port_header = X-Forwarded-Port")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable the Proxy Protocol V1/2 support.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.proxy_protocol")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.proxy_protocol = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the timeout for proxy protocol.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.proxy_protocol_timeout")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.proxy_protocol_timeout = 3s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS versions only to protect from POODLE attack.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.tls_versions")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String, seperated by ','")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: Do not use tlsv1.3 if emqx is running on OTP-22 or earlier")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.tls_versions = tlsv1.3,tlsv1.2,tlsv1.1,tlsv1")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to the file containing the user's private PEM-encoded key.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.keyfile")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\nlistener.wss.external.keyfile = etc/certs/key.pem\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to a file containing the user certificate.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.certfile")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\nlistener.wss.external.certfile = etc/certs/cert.pem\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to the file containing PEM-encoded CA certificates.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.cacert")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.cacertfile = etc/certs/cacert.pem")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum number of non-self-issued intermediate certificates that")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## can follow the peer certificate in a valid certification path.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.external.depth")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.depth = 10")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## String containing the user's password. Only used if the private keyfile")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## is password-protected.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.key_password")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.key_password = yourpass")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.dhfile")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.ssl.external.dhfile = etc/certs/dh-params.pem")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.verify")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: verify_peer | verify_none")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.verify = verify_peer")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.fail_if_no_peer_cert")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: false | true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.fail_if_no_peer_cert = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.ciphers")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Ciphers")]),t._v("\nlistener.wss.external.ciphers = TLS_AES_256_GCM_SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("TLS_AES_128_GCM_SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("TLS_CHACHA20_POLY1305_SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("TLS_AES_128_CCM_SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("TLS_AES_128_CCM_8_SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DES"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("CBC3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DSS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DSS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA384"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DSS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DSS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("GCM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DSS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AES256"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DHE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("DSS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ECDSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ECDH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("RSA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AES128"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SHA\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Ciphers for TLS PSK.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Note that 'listener.wss.external.ciphers' and 'listener.wss.external.psk_ciphers' cannot")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## be configured at the same time.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See 'https://tools.ietf.org/html/rfc4279#section-2'.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.psk_ciphers = PSK-AES128-CBC-SHA,PSK-AES256-CBC-SHA,PSK-3DES-EDE-CBC-SHA,PSK-RC4-SHA")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.secure_renegotiate")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.secure_renegotiate = off")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.reuse_sessions")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.reuse_sessions = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.honor_cipher_order")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.honor_cipher_order = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.peer_cert_as_username")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: cn | dn | crt | pem | md5")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.peer_cert_as_username = cn")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.ssl.$name.peer_cert_as_clientid")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: cn | dn | crt | pem | md5")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.peer_cert_as_clientid = cn")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TCP backlog for the WebSocket/SSL connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.backlog")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number >= 0")]),t._v("\nlistener.wss.external.backlog = 1024\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP send timeout for the WebSocket/SSL connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.send_timeout")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\nlistener.wss.external.send_timeout = 15s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Close the WebSocket/SSL connection if send timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.send_timeout_close")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\nlistener.wss.external.send_timeout_close = on\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP receive buffer(os kernel) for the WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.recbuf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.recbuf = 4KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP send buffer(os kernel) for the WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.sndbuf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.sndbuf = 4KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The size of the user-level software buffer used by the driver.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.buffer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.buffer = 4KB")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The TCP_NODELAY flag for WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.tcp.$name.nodelay")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.nodelay = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The compress flag for external WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If this Value is set true,the websocket message would be compressed")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.compress = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The level of deflate options for external WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.wss.$name.deflate_opts.level")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: none | default | best_compression | best_speed")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.deflate_opts.level = default")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The mem_level of deflate options for external WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.wss.$name.deflate_opts.mem_level")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Valid range is 1-9")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.deflate_opts.mem_level = 8")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The strategy of deflate options for external WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.wss.$name.deflate_opts.strategy")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: default | filtered | huffman_only | rle")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.deflate_opts.strategy = default")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The deflate option for external WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.wss.$name.deflate_opts.server_context_takeover")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: takeover | no_takeover")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.deflate_opts.server_context_takeover = takeover")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The deflate option for external WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.wss.$name.deflate_opts.client_context_takeover")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: takeover | no_takeover")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.deflate_opts.client_context_takeover = takeover")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The deflate options for external WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.wss.$name.deflate_opts.server_max_window_bits")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Valid range is 8-15")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.deflate_opts.server_max_window_bits = 15")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The deflate options for external WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.wss.$name.deflate_opts.client_max_window_bits")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Valid range is 8-15")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.deflate_opts.client_max_window_bits = 15")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The idle timeout for external WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: listener.wss.$name.idle_timeout")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.idle_timeout = 60s")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The max frame size for external WebSocket/SSL connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## listener.wss.external.max_frame_size = 0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Whether a WebSocket message is allowed to contain multiple MQTT packets")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: single | multiple")]),t._v("\nlistener.wss.external.mqtt_piggyback = multiple\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable origin check in header for secure websocket connection")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false (default false)")]),t._v("\nlistener.wss.external.check_origin_enable = false\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Allow origin to be absent in header in secure websocket connection  when check_origin_enable is true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false (default true)")]),t._v("\nlistener.wss.external.allow_origin_absence = true\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Comma separated list of allowed origin in header for secure websocket connection")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: http://url eg. https://localhost:3030, https://127.0.0.1:3030")]),t._v("\nlistener.wss.external.check_origins = https"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3030")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" https"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3030")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_END=listeners ================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_BGN=modules ==================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The file to store loaded module names.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\nmodules.loaded_file = data/loaded_modules\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Presence Module")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Sets the QoS for presence MQTT message.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: 0 | 1 | 2")]),t._v("\nmodule.presence.qos = 1\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Subscription Module")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Subscribe the Topics automatically when client connected.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## module.subscription.1.topic = connected/%c/%u")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Qos of the proxy subscription.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: 0 | 1 | 2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## module.subscription.1.qos = 0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## No Local of the proxy subscription options.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This configuration only takes effect in the MQTT V5 protocol.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: 0 | 1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## module.subscription.1.nl = 0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Retain As Published of the proxy subscription options.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This configuration only takes effect in the MQTT V5 protocol.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: 0 | 1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## module.subscription.1.rap = 0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Retain Handling of the proxy subscription options.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This configuration only takes effect in the MQTT V5 protocol.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: 0 | 1 | 2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## module.subscription.1.rh = 0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Rewrite Module")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## {rewrite, Topic, Re, Dest}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## module.rewrite.pub.rule.1 = x/# ^x/y/(.+)$ z/y/$1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## module.rewrite.sub.rule.1 = y/+/z/# ^y/(.+)/z/(.+)$ y/z/$2")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_END=modules ==================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##-------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Plugins")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##-------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The etc dir for plugins' config.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Folder")]),t._v("\nplugins.etc_dir = etc/plugins/\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The file to store loaded plugin names.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\nplugins.loaded_file = data/loaded_plugins\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The directory of extension plugins.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\nplugins.expand_plugins_dir = etc/plugins/\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Broker")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## System interval of publishing $SYS messages.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 1m, 1 minute")]),t._v("\nbroker.sys_interval = 1m\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## System heartbeat interval of publishing following heart beat message:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('##  - "$SYS/brokers/<node>/uptime"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('##  - "$SYS/brokers/<node>/datetime"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 30s")]),t._v("\nbroker.sys_heartbeat = 30s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Session locking strategy in a cluster.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Enum")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - local")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - leader")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - quorum")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - all")]),t._v("\nbroker.session_locking_strategy = quorum\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Dispatch strategy for shared subscription")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Enum")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - random")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - round_robin")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - sticky")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - hash # same as hash_clientid")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - hash_clientid")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - hash_topic")]),t._v("\nbroker.shared_subscription_strategy = random\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable/disable shared dispatch acknowledgement for QoS1 and QoS2 messages")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This should allow messages to be dispatched to a different subscriber in")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the group in case the picked (based on shared_subscription_strategy) one # is offline")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Enum")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## - false")]),t._v("\nbroker.shared_dispatch_ack_enabled = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable batch clean for deleted routes.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Flag")]),t._v("\nbroker.route_batch_clean = off\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Performance toggle for subscribe/unsubscribe wildcard topic.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Change this toggle only when there are many wildcard topics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Enum")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - key:   mnesia translational updates with per-key locks. recommended for single node setup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - tab:   mnesia translational updates with table lock. recommended for multi-nodes setup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - global: global lock protected updates. recommended for larger cluster.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: when changing from/to 'global' lock, it requires all nodes in the cluster")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## to be stopped before the change.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# broker.perf.route_lock_type = key")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable trie path compaction.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enabling it significantly improves wildcard topic subscribe rate,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## if wildcard topics have unique prefixes like: 'sensor//+/',")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## where ID is unique per subscriber.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Topic match performance (when publishing) may degrade if messages")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## are mostly published to topics with large number of levels.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: This is a cluster-wide configuration.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## It rquires all nodes to be stopped before changing it.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Enum")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - true: enable trie path compaction")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - false: disable trie path compaction")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# broker.perf.trie_compaction = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_BGN=sys_mon ==================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable Long GC monitoring. Disable if the value is 0.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Notice: don't enable the monitor in production for:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## https://github.com/erlang/otp/blob/feb45017da36be78d4c5784d758ede619fa7bfd3/erts/emulator/beam/erl_gc.c#L421")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - h: hour")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - m: minute")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - s: second")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - ms: milliseconds")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Examples:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - 2h:  2 hours")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - 30m: 30 minutes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - 0.1s: 0.1 seconds")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - 100ms : 100 milliseconds")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 0ms")]),t._v("\nsysmon.long_gc = 0\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable Long Schedule(ms) monitoring.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/erlang.html#system_monitor-2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - h: hour")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - m: minute")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - s: second")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - ms: milliseconds")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Examples:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - 2h:  2 hours")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - 30m: 30 minutes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - 0.1s: 0.1 seconds")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - 100ms: 100 milliseconds")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 0ms")]),t._v("\nsysmon.long_schedule = 240ms\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable Large Heap monitoring.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/erlang.html#system_monitor-2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: bytes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 8M words. 32MB on 32-bit VM, 64MB on 64-bit VM.")]),t._v("\nsysmon.large_heap = 8MB\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable Busy Port monitoring.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/erlang.html#system_monitor-2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nsysmon.busy_port = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enable Busy Dist Port monitoring.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: http://erlang.org/doc/man/erlang.html#system_monitor-2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: true | false")]),t._v("\nsysmon.busy_dist_port = true\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The time interval for the periodic cpu check")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -h: hour, e.g. '2h' for 2 hours")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -m: minute, e.g. '5m' for 5 minutes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -s: second, e.g. '30s' for 30 seconds")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 60s")]),t._v("\nos_mon.cpu_check_interval = 60s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The threshold, as percentage of system cpu, for how much system cpu can be used before the corresponding alarm is set.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 80%")]),t._v("\nos_mon.cpu_high_watermark = 80%\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The threshold, as percentage of system cpu, for how much system cpu can be used before the corresponding alarm is clear.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 60%")]),t._v("\nos_mon.cpu_low_watermark = 60%\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The time interval for the periodic memory check")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -h: hour, e.g. '2h' for 2 hours")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -m: minute, e.g. '5m' for 5 minutes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## -s: second, e.g. '30s' for 30 seconds")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 60s")]),t._v("\nos_mon.mem_check_interval = 60s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The threshold, as percentage of system memory, for how much system memory can be allocated before the corresponding alarm is set.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 70%")]),t._v("\nos_mon.sysmem_high_watermark = 70%\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The threshold, as percentage of system memory, for how much system memory can be allocated by one Erlang process before the corresponding alarm is set.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 5%")]),t._v("\nos_mon.procmem_high_watermark = 5%\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The time interval for the periodic process limit check")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 30s")]),t._v("\nvm_mon.check_interval = 30s\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The threshold, as percentage of processes, for how many processes can simultaneously exist at the local node before the corresponding alarm is set.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 80%")]),t._v("\nvm_mon.process_high_watermark = 80%\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The threshold, as percentage of processes, for how many processes can simultaneously exist at the local node before the corresponding alarm is clear.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 60%")]),t._v("\nvm_mon.process_low_watermark = 60%\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specifies the actions to take when an alarm is activated")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - log")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - publish")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: log,publish")]),t._v("\nalarm.actions = log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("publish\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The maximum number of deactivated alarms")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Integer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 1000")]),t._v("\nalarm.size_limit = 1000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Validity Period of deactivated alarms")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Duration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - h: hour")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - m: minute")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - s: second")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  - ms: milliseconds")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default: 24h")]),t._v("\nalarm.validity_period = 24h\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## CONFIG_SECTION_END=sys_mon ==================================================")]),t._v("\n")])])]),e("h5",{attrs:{id:"_4-2-2-plugins-emqx-dashboard-conf"}},[t._v("4.2.2 "),e("code",[t._v("plugins/emqx_dashboard.conf")]),t._v(" "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-plugins-emqx-dashboard-conf"}},[t._v("#")])]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## EMQ X Dashboard")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default user's login name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\ndashboard.default_user.login = admin\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default user's password.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\ndashboard.default_user.password = public\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## HTTP Listener")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The port that the Dashboard HTTP listener will bind.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Port")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Examples: 18083")]),t._v("\ndashboard.listener.http = 3050\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The acceptor pool for external Dashboard HTTP listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\ndashboard.listener.http.acceptors = 4\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum number of concurrent Dashboard HTTP connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\ndashboard.listener.http.max_clients = 512\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set up the socket for IPv6.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: false | true")]),t._v("\ndashboard.listener.http.inet6 = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Listen on IPv4 and IPv6 (false) or only on IPv6 (true). Use with inet6.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: false | true")]),t._v("\ndashboard.listener.http.ipv6_v6only = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## HTTPS Listener")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The port that the Dashboard HTTPS listener will bind.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Port")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Examples: 18084")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https = 18084")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The acceptor pool for external Dashboard HTTPS listener.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.acceptors = 2")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum number of concurrent Dashboard HTTPS connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.max_clients = 512")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set up the socket for IPv6.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: false | true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.inet6 = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Listen on IPv4 and IPv6 (false) or only on IPv6 (true). Use with inet6.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: false | true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.ipv6_v6only = false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to the file containing the user's private PEM-encoded key.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.keyfile = etc/certs/key.pem")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to a file containing the user certificate.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.certfile = etc/certs/cert.pem")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path to the file containing PEM-encoded CA certificates.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.cacertfile = etc/certs/cacert.pem")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: 'listener.ssl.<name>.dhfile' in emq.conf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: File")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.dhfile = etc/certs/dh-params.pem")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: 'listener.ssl.<name>.verify' in emq.conf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: verify_peer | verify_none")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.verify = verify_peer")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: 'listener.ssl.<name>.fail_if_no_peer_cert' in emq.conf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: false | true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.fail_if_no_peer_cert = true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TLS versions only to protect from POODLE attack.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String, seperated by ','")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: Do not use tlsv1.3 if emqx is running on OTP-22 or earlier")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.tls_versions = tlsv1.3,tlsv1.2,tlsv1.1,tlsv1")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: 'listener.ssl.<name>.ciphers' in emq.conf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: Ciphers")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.ciphers = TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-DES-CBC3-SHA,ECDH-ECDSA-AES256-GCM-SHA384,ECDH-RSA-AES256-GCM-SHA384,ECDH-ECDSA-AES256-SHA384,ECDH-RSA-AES256-SHA384,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES256-SHA256,AES256-GCM-SHA384,AES256-SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,ECDH-ECDSA-AES128-GCM-SHA256,ECDH-RSA-AES128-GCM-SHA256,ECDH-ECDSA-AES128-SHA256,ECDH-RSA-AES128-SHA256,DHE-DSS-AES128-GCM-SHA256,DHE-DSS-AES128-SHA256,AES128-GCM-SHA256,AES128-SHA256,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES256-SHA,DHE-DSS-AES256-SHA,ECDH-ECDSA-AES256-SHA,ECDH-RSA-AES256-SHA,AES256-SHA,ECDHE-ECDSA-AES128-SHA,ECDHE-RSA-AES128-SHA,DHE-DSS-AES128-SHA,ECDH-ECDSA-AES128-SHA,ECDH-RSA-AES128-SHA,AES128-SHA")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: 'listener.ssl.<name>.secure_renegotiate' in emq.conf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.secure_renegotiate = off")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: 'listener.ssl.<name>.reuse_sessions' in emq.conf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.reuse_sessions = on")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See: 'listener.ssl.<name>.honor_cipher_order' in emq.conf")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: on | off")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dashboard.listener.https.honor_cipher_order = on")]),t._v("\n")])])]),e("h5",{attrs:{id:"_4-2-3-plugins-emqx-management-conf"}},[t._v("4.2.3 "),e("code",[t._v("plugins/emqx_management.conf")]),t._v(" "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-plugins-emqx-management-conf"}},[t._v("#")])]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## EMQ X Management Plugin")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Max Row Limit")]),t._v("\nmanagement.max_row_limit = 10000\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Application default secret")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.application.default_secret = public")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default Application ID")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\nmanagement.default_application.id = admin\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Default Application Secret")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Value: String")]),t._v("\nmanagement.default_application.secret = public\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## HTTP Listener")]),t._v("\n\nmanagement.listener.http = 3040\nmanagement.listener.http.acceptors = 2\nmanagement.listener.http.max_clients = 512\nmanagement.listener.http.backlog = 512\nmanagement.listener.http.send_timeout = 15s\nmanagement.listener.http.send_timeout_close = on\nmanagement.listener.http.inet6 = false\nmanagement.listener.http.ipv6_v6only = false\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##--------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## HTTPS Listener")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https = 8081")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.acceptors = 2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.max_clients = 512")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.backlog = 512")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.send_timeout = 15s")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.send_timeout_close = on")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.certfile = etc/certs/cert.pem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.keyfile = etc/certs/key.pem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.cacertfile = etc/certs/cacert.pem")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.verify = verify_peer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## NOTE: Do not use tlsv1.3 if emqx is running on OTP-22 or earlier")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.tls_versions = tlsv1.3,tlsv1.2,tlsv1.1,tlsv1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.ciphers = TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-DES-CBC3-SHA,ECDH-ECDSA-AES256-GCM-SHA384,ECDH-RSA-AES256-GCM-SHA384,ECDH-ECDSA-AES256-SHA384,ECDH-RSA-AES256-SHA384,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES256-SHA256,AES256-GCM-SHA384,AES256-SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,ECDH-ECDSA-AES128-GCM-SHA256,ECDH-RSA-AES128-GCM-SHA256,ECDH-ECDSA-AES128-SHA256,ECDH-RSA-AES128-SHA256,DHE-DSS-AES128-GCM-SHA256,DHE-DSS-AES128-SHA256,AES128-GCM-SHA256,AES128-SHA256,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES256-SHA,DHE-DSS-AES256-SHA,ECDH-ECDSA-AES256-SHA,ECDH-RSA-AES256-SHA,AES256-SHA,ECDHE-ECDSA-AES128-SHA,ECDHE-RSA-AES128-SHA,DHE-DSS-AES128-SHA,ECDH-ECDSA-AES128-SHA,ECDH-RSA-AES128-SHA,AES128-SHA")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.fail_if_no_peer_cert = true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.inet6 = false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## management.listener.https.ipv6_v6only = false")]),t._v("\n")])])]),e("h4",{attrs:{id:"_4-3-启动"}},[t._v("4.3 启动 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-启动"}},[t._v("#")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("/data/emqx/dc3/node-01/bin/emqx start\n\n/data/emqx/dc3/node-02/bin/emqx start\n\n/data/emqx/dc3/node-03/bin/emqx start\n")])])]),e("h4",{attrs:{id:"_4-4-节点配置"}},[t._v("4.4 节点配置 "),e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-节点配置"}},[t._v("#")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("配置 "),e("code",[t._v("节点2")]),t._v(" 加入 "),e("code",[t._v("节点1")])])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("/data/emqx/dc3/node-02/bin/emqx_ctl cluster "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v(" node-01@127.0.0.1\n")])])]),e("blockquote",[e("p",[e("strong",[t._v("配置 "),e("code",[t._v("节点3")]),t._v(" 加入 "),e("code",[t._v("节点1")])])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("/data/emqx/dc3/node-03/bin/emqx_ctl cluster "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v(" node-01@127.0.0.1\n")])])]),e("blockquote",[e("p",[e("strong",[t._v("节点状态")])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("/data/emqx/dc3/node-03/bin/emqx_ctl cluster status\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);